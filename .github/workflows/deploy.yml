name: Build, Push, and Deploy

on:
  pull_request:
    branches:
      - main

env:
  DOCKER_BUILD_RECORD_RETENTION_DAYS: 1
  BUILDX_CACHE_MAX_SIZE: 5GB
  ACTIONS_CACHE_KEY_PREFIX: v1

jobs:
  build_frontend_image:
    name: 1. Build Frontend Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image and save as artifact
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          load: true
          tags: diametrfq/website:latest
          cache-from: |
            type=gha,scope=frontend-build-${{ hashFiles('frontend/**') }}
            type=gha,scope=frontend-build
          cache-to: |
            type=gha,mode=max,scope=frontend-build-${{ hashFiles('frontend/**') }}
            type=gha,mode=min,scope=frontend-build
      - name: Save image to tar
        run: docker save diametrfq/website:latest -o /tmp/frontend.tar
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image-${{ github.run_number }}
          path: /tmp/frontend.tar

  build_backend_image:
    name: 2. Build Backend Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # НОВЫЙ ШАГ: Устанавливаем Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm' # Включаем кеширование для npm
          cache-dependency-path: backend/package-lock.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # ИЗМЕНЕННЫЙ ШАГ: Логика кеширования и сборки для Node.js
      - name: Build image and save as artifact
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          load: true
          tags: diametrfq/website-backend:latest
          cache-from: type=gha,scope=backend-build-v1
          cache-to: type=gha,mode=max,scope=backend-build-v1
          
      - name: Save image to tar
        run: docker save diametrfq/website-backend:latest -o /tmp/backend.tar
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image-${{ github.run_number }}
          path: /tmp/backend.tar

  push_images:
    name: 3. Push Images to Docker Hub
    runs-on: ubuntu-latest
    needs: [build_frontend_image, build_backend_image]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Download frontend image artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image-${{ github.run_number }}
          path: /tmp
      - name: Download backend image artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image-${{ github.run_number }}
          path: /tmp
      - name: Load and Push Frontend Image
        run: |
          docker load --input /tmp/frontend.tar
          docker push diametrfq/website:latest &
      - name: Load and Push Backend Image
        run: |
          docker load --input /tmp/backend.tar
          docker push diametrfq/website-backend:latest &
      - name: Wait for all pushes to complete
        run: wait

  deploy_to_server:
    name: 4. Deploy to Server
    runs-on: ubuntu-latest
    needs: [push_images]
    steps:
      - uses: actions/checkout@v4
      - name: Transfer Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          source: |
            ./docker-compose.yml
            ./configs
          target: "/myPath"
          
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            mkdir -p /myPath
            cd /myPath

            export GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            export SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }}
            export SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }}
            export SPOTIFY_REFRESH_TOKEN=${{ secrets.SPOTIFY_REFRESH_TOKEN }}
            
            echo "Logging in to Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            echo "Pulling latest images..."
            docker-compose pull
            
            echo "Starting services..."
            docker-compose up -d --force-recreate --remove-orphans
            
            echo "Cleaning up old images..."
            docker system prune -af