# .github/workflows/deploy.yml
name: Build, Test and Deploy

on:
  # Запускаем деплой только при мерже в main
  push:
    branches:
      - main

jobs:
  build_and_push_docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Сборка фронтенда внутри Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/website:latest
          # Добавляем --no-cache, чтобы гарантированно подхватить изменения
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 2. Сборка бэкенда внутри Docker
      - name: Build and Push Backend Docker Image
        # Для бэкенда мы тоже можем использовать multi-stage build, чтобы не собирать его заранее.
        # Это более надежно. Давайте создадим для него правильный Dockerfile.
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/website-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  deploy_to_server:
    runs-on: ubuntu-latest
    needs: build_and_push_docker
    steps:
      # Копируем только нужные для запуска файлы
      - name: Transfer Files to Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          source: "./docker-compose.yml,./nginx.prod.conf,./prometheus.yml,./grafana-provisioning/"
          target: "/home/diametrfq/site" # Используйте ваш реальный путь

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            cd /home/diametrfq/site
            
            # Экспортируем все секреты
            export GRAFANA_ADMIN_PASSWORD='${{ secrets.GRAFANA_ADMIN_PASSWORD }}'
            export SPOTIFY_CLIENT_ID='${{ secrets.SPOTIFY_CLIENT_ID }}'
            export SPOTIFY_CLIENT_SECRET='${{ secrets.SPOTIFY_CLIENT_SECRET }}'
            export SPOTIFY_REFRESH_TOKEN='${{ secrets.SPOTIFY_REFRESH_TOKEN }}'
            export RUST_LOG_LEVEL='info' # Устанавливаем уровень логов для прода

            # Логинимся в Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Принудительно скачиваем новые версии образов
            docker compose pull
            
            # Пересоздаем контейнеры, чтобы они использовали новые образы
            docker compose up -d --force-recreate --remove-orphans
            
            # Чистим старые, неиспользуемые образы
            docker system prune -af