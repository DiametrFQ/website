name: Build, Push, and Deploy (5 Separate Jobs)

on:
  push:
    branches:
      - main

jobs:
  build_frontend_image:
    name: 1. Build Frontend Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image and save as artifact
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          load: true
          tags: diametrfq/website:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Save image to tar
        run: docker save diametrfq/website:latest -o /tmp/frontend.tar
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: /tmp/frontend.tar

  build_backend_image:
    name: 2. Build Backend Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image and save as artifact
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          load: true
          tags: diametrfq/website-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Save image to tar
        run: docker save diametrfq/website-backend:latest -o /tmp/backend.tar
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: /tmp/backend.tar

  push_frontend_image:
    name: 3. Push Frontend Image
    runs-on: ubuntu-latest
    needs: [build_frontend_image, build_backend_image]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Download frontend image artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: /tmp
      - name: Load and Push Frontend Image
        run: |
          docker load --input /tmp/frontend.tar
          docker push diametrfq/website:latest

  push_backend_image:
    name: 4. Push Backend Image
    runs-on: ubuntu-latest
    needs: [build_frontend_image, build_backend_image]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Download backend image artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp
      - name: Load and Push Backend Image
        run: |
          docker load --input /tmp/backend.tar
          docker push diametrfq/website-backend:latest

  deploy_to_server:
    name: 5. Deploy to Server
    runs-on: ubuntu-latest
    needs: [push_frontend_image, push_backend_image]
    steps:
      - uses: actions/checkout@v4
      - name: Transfer Files to Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          source: "./docker-compose.yml,./configs,./nginx.prod.conf"
          target: "/myPath"
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            cd /myPath
            export GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            export SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }}
            export SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }}
            export SPOTIFY_REFRESH_TOKEN=${{ secrets.SPOTIFY_REFRESH_TOKEN }}
            
            echo "Logging in to Docker Hub..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            echo "Pulling latest images..."
            docker-compose pull
            
            echo "Starting services..."
            docker-compose up -d --force-recreate --remove-orphans
            
            echo "Cleaning up old images..."
            docker system prune -af
