name: Build, Push and Deploy

on:
  pull_request:
    branches:
      - main

jobs:
  build_images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]
    outputs:
      image_name: ${{ steps.image_name.outputs.name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Define image name
        id: image_name
        run: |
          if [ "${{ matrix.service }}" == "frontend" ]; then
            echo "name=${{ secrets.DOCKER_USERNAME }}/website" >> $GITHUB_OUTPUT
          else
            echo "name=${{ secrets.DOCKER_USERNAME }}/website-backend" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image for ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          push: false
          load: true
          tags: ${{ steps.image_name.outputs.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image to tar
        run: docker save ${{ steps.image_name.outputs.name }}:latest -o /tmp/${{ matrix.service }}.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: /tmp/${{ matrix.service }}.tar

  push_images:
    runs-on: ubuntu-latest
    needs: build_images
    strategy:
      matrix:
        service: [frontend, backend]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download ${{ matrix.service }} image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: /tmp

      - name: Load and Push ${{ matrix.service }} Image
        run: |
          docker load --input /tmp/${{ matrix.service }}.tar
          IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(website|website-backend):latest")
          echo "Pushing image: $IMAGE_NAME"
          docker push $IMAGE_NAME

  deploy_to_server:
    runs-on: ubuntu-latest
    needs: push_images
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Transfer Files to Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          source: "./docker-compose.yml,./nginx.prod.conf,./prometheus.yml,./grafana-provisioning"
          target: "/myPath"
          strip_components: 1

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            cd /myPath
            export GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}
            export SPOTIFY_CLIENT_ID=${{ secrets.SPOTIFY_CLIENT_ID }}
            export SPOTIFY_CLIENT_SECRET=${{ secrets.SPOTIFY_CLIENT_SECRET }}
            export SPOTIFY_REFRESH_TOKEN=${{ secrets.SPOTIFY_REFRESH_TOKEN }}

            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            docker-compose -f /myPath/docker-compose.yml pull
            
            docker-compose -f /myPath/docker-compose.yml up -d --force-recreate --remove-orphans
            
            docker system prune -af