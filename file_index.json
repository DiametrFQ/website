{
  ".github/workflows/deploy.yml": "name: Build, Test and Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  test_and_prebuild:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '22'\n\n      - name: Install Frontend Dependencies and Build\n        working-directory: ./frontend\n        run: |\n          npm ci\n          npm run build\n\n      - name: Set up Rust\n        uses: actions-rs/toolchain@v1\n        with:\n          toolchain: stable\n          profile: minimal\n          override: true\n\n      - name: Build Backend (Release)\n        working-directory: ./backend\n        run: cargo build --release --verbose\n\n  build_and_push_docker:\n    runs-on: ubuntu-latest\n    needs: test_and_prebuild\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v1\n\n      - name: Log in to Docker Hub\n        run: echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\n\n      - name: Build and Push Frontend Docker Image\n        run: |\n          docker build -t ${{ secrets.DOCKER_USERNAME }}/website:$IMAGE_TAG_SHORT -t ${{ secrets.DOCKER_USERNAME }}/website:latest ./frontend\n          docker push ${{ secrets.DOCKER_USERNAME }}/website:latest\n\n      - name: Build and Push Backend Docker Image\n        run: |\n          docker build -t ${{ secrets.DOCKER_USERNAME }}/website-backend:$IMAGE_TAG_SHORT -t ${{ secrets.DOCKER_USERNAME }}/website-backend:latest ./backend\n          docker push ${{ secrets.DOCKER_USERNAME }}/website-backend:latest\n\n  deploy_to_server:\n    runs-on: ubuntu-latest\n    needs: build_and_push_docker\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Transfer Files to Server\n        uses: appleboy/scp-action@v0.1.4\n        with:\n          host: ${{ secrets.HOSTING_SERVER }}\n          username: ${{ secrets.HOSTING_NAME }}\n          password: ${{ secrets.HOSTING_PASSWORD }}\n          source: \"./docker-compose.yml,./nginx.prod.conf\"\n          target: \"/myPath\"\n\n      - name: Deploy to Server\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.HOSTING_SERVER }}\n          username: ${{ secrets.HOSTING_NAME }}\n          password: ${{ secrets.HOSTING_PASSWORD }}\n          script: |\n            # Установка Docker и Docker Compose (можно вынести в подготовку сервера)\n            if ! command -v docker &> /dev/null; then\n              echo \"Docker не найден, устанавливаем...\"\n              sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common\n              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n              sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" -y\n              sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io\n              sudo usermod -aG docker ${{ secrets.HOSTING_NAME }}\n            fi\n            if ! command -v docker-compose &> /dev/null; then\n              echo \"Docker Compose не найден, устанавливаем...\"\n              LATEST_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -oP '\"tag_name\": \"\\K(.*)(?=\")')\n              sudo curl -L \"https://github.com/docker/compose/releases/download/${LATEST_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n              sudo chmod +x /usr/local/bin/docker-compose\n            fi\n\n            cd /myPath\n\n            # Вход в Docker Hub\n            echo \"${{ secrets.DOCKER_PASSWORD }}\" | docker login -u \"${{ secrets.DOCKER_USERNAME }}\" --password-stdin\n\n            # Загружаем последние :latest образы (или специфичные теги, если docker-compose.yml настроен на них)\n            # Файл docker-compose.yml, который мы скопировали, должен уже содержать правильные имена образов\n            # например, ВАШ_DOCKER_USERNAME/website:latest\n            echo \"Pulling latest images...\"\n            docker-compose -f /myPath/docker-compose.yml pull frontend\n            docker-compose -f /myPath/docker-compose.yml pull backend\n\n            # Останавливаем текущие контейнеры (если есть) и запускаем новые с обновленными образами\n            echo \"Restarting services...\"\n            docker-compose -f /myPath/docker-compose.yml up -d --remove-orphans\n            # --remove-orphans удалит контейнеры для сервисов, которых больше нет в docker-compose.yml\n\n            echo \"Deployment successful!\"\n\n            # Очистка старых образов (опционально, но рекомендуется)\n            echo \"Pruning old docker resources...\"\n            docker system prune -af",
  ".gitignore": ".env\n**.local**\n**.dev**\n\n",
  ".vscode/settings.json": "{\n  \"cSpell.words\": [\n    \"clickmap\"\n  ]\n}",
  "backend/.gitignore": "target",
  "backend/Cargo.toml": "[package]\nname = \"backend\"\nversion = \"0.1.0\"\nedition = \"2024\"\n\n[dependencies]\nactix-web = \"4\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\nreqwest = { version = \"0.12\", features = [\"json\"] }\ntokio = { version = \"1\", features = [\"macros\", \"rt-multi-thread\"] }\nlog = \"0.4\"\nenv_logger = \"0.11\"\nthiserror = \"1.0\"\ndotenvy = \"0.15\"\nrss = \"2.0.12\"\nregex = \"1.11.1\"\nscraper = \"0.23.1\"\nasync-trait = \"0.1.88\"\nbytes = \"1.10.1\"\n\n[[test]]\nname = \"api_tests\"\npath = \"tests/api_tests.rs\"\n",
  "backend/Dockerfile": "# backend/Dockerfile\n\n# Этап 1: Сборка приложения\nFROM rust:1-slim as builder\n\n# Устанавливаем необходимые системные зависимости для сборки:\nRUN apt-get update && apt-get install -y \\\n    pkg-config \\\n    libssl-dev \\\n    build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nCOPY Cargo.toml Cargo.lock* ./\n\nRUN mkdir src && echo \"fn main() {}\" > src/main.rs\nRUN cargo build --release --target x86_64-unknown-linux-gnu\nRUN rm -rf src target/x86_64-unknown-linux-gnu/release/deps/backend*\n\nCOPY src ./src\n\nRUN cargo build --release --target x86_64-unknown-linux-gnu\n\n# Этап 2: Создание образа для запуска\n# ИСПОЛЬЗУЕМ ТОТ ЖЕ БАЗОВЫЙ ОБРАЗ, ЧТО И ДЛЯ СБОРКИ, или очень похожий\n# rust:1-slim уже содержит необходимые runtime-библиотеки для OpenSSL,\n# с которой он сам собран, и ca-certificates.\nFROM rust:1-slim\n# Если rust:1-slim не содержит libssl в runtime или вы хотите быть уверены,\n# то можно установить нужную версию явно.\n# Сначала нужно понять, какая версия OpenSSL в rust:1-slim.\n# Можно проверить это, запустив контейнер: docker run -it --rm rust:1-slim openssl version\n# Если это OpenSSL 3.x, то libssl3 должно быть доступно или установлено.\n# Если это OpenSSL 1.1.x, то libssl1.1.\n\n# Для rust:1-slim (который на Debian Bookworm или новее) обычно OpenSSL 3.x\n# Попробуем установить libssl3, если оно не включено по умолчанию.\n# Но часто в образах *-slim уже есть необходимые рантайм библиотеки.\n# ca-certificates обычно нужны.\nRUN apt-get update && apt-get install -y \\\n    ca-certificates \\\n    # Попробуем без явной установки libsslX, так как rust:1-slim должен сам это предоставлять\n    # для той версии, с которой собран libssl-dev внутри него.\n    # Если все еще будет ошибка, тогда раскомментируйте и установите нужную версию:\n    # libssl3 \\ # Если rust:1-slim на Bookworm/новее и приложение слинковалось с OpenSSL 3\n    && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n\nCOPY --from=builder /app/target/x86_64-unknown-linux-gnu/release/backend .\n\nEXPOSE 8080\nENV RUST_LOG=\"info\"\nCMD [\"./backend\"]",
  "backend/src/config.rs": "use actix_web::web;\nuse crate::telegram; // Импортируем наш модуль telegram\n\npub fn config_services(cfg: &mut web::ServiceConfig) {\n    cfg.service(\n        web::scope(\"/api\") // Общий префикс /api для всех модулей\n            .configure(telegram::routes::config)\n        // Сюда можно будет добавлять другие модули:\n        // .configure(another_module::routes::config)\n    );\n}",
  "backend/src/errors.rs": "use actix_web::{error::ResponseError, HttpResponse};\nuse serde::Serialize;\n\n#[derive(Debug, thiserror::Error)]\npub enum AppError {\n    #[error(\"Reqwest Error: {0}\")]\n    RequestError(#[from] reqwest::Error),\n\n    #[error(\"RSS Parsing Error: {0}\")]\n    RssError(#[from] rss::Error),\n\n    #[error(\"IO Error: {0}\")]\n    IoError(#[from] std::io::Error),\n\n    #[error(\"Internal Server Error: {0}\")]\n    InternalError(String),\n}\n\n#[derive(Serialize)]\nstruct ErrorResponse {\n    message: String,\n}\n\nimpl ResponseError for AppError {\n    fn error_response(&self) -> HttpResponse {\n        log::error!(\"Error occurred: {}\", self);\n        match self {\n            AppError::RequestError(_) | AppError::RssError(_) | AppError::IoError(_) => {\n                HttpResponse::InternalServerError().json(ErrorResponse {\n                    message: \"An internal error occurred while processing your request.\".to_string(),\n                })\n            }\n            AppError::InternalError(msg) => HttpResponse::InternalServerError().json(ErrorResponse {\n                message: msg.clone(),\n            }),\n        }\n    }\n}\n\n// Удобный тип Result для нашего приложения\npub type AppResult<T> = Result<T, AppError>;",
  "backend/src/lib.rs": "pub mod config;\npub mod errors;\npub mod telegram;",
  "backend/src/main.rs": "use actix_web::{web, App, HttpServer, middleware::Logger};\nuse std::io::Result;\nuse std::sync::Arc;\n\nuse backend::config::config_services;\nuse backend::telegram;\n\n#[actix_web::main]\nasync fn main() -> Result<()> {\n    env_logger::init_from_env(env_logger::Env::new().default_filter_or(\"info\"));\n\n    dotenvy::dotenv().ok();\n\n    let server_address = \"0.0.0.0\";\n    let server_port = 8080; // Выберите порт для Rust бэкенда\n\n    log::info!(\"Starting server at http://{}:{}\", server_address, server_port);\n\n    let real_fetcher = Arc::new(telegram::services::RealRssFetcher);\n\n    HttpServer::new(move || {\n        App::new()\n            .wrap(Logger::default())\n            // Добавляем fetcher в состояние приложения\n            .app_data(web::Data::from(real_fetcher.clone())) \n            .configure(config_services)\n    })\n    .bind((server_address, server_port))?\n    .run()\n    .await\n}",
  "backend/src/telegram/handlers.rs": "\nuse actix_web::HttpResponse;\nuse crate::telegram::models::Post;\n\npub async fn get_telegram_posts_handler() -> HttpResponse {\n    println!(\"[DEBUG] INSIDE THE DUMMY HANDLER!\");\n    let hardcoded_posts: Vec<Post> = vec![\n        Post {\n            title: \"Hardcoded Post\".to_string(),\n            link: \"url\".to_string(),\n            content_snippet: \"snippet\".to_string(),\n            image_url: None,\n        }\n    ];\n    HttpResponse::Ok().json(hardcoded_posts)\n}",
  "backend/src/telegram/mod.rs": "pub mod handlers;\npub mod models;\npub mod routes;\npub mod services;",
  "backend/src/telegram/models.rs": "use serde::{Deserialize, Serialize};\n\n#[derive(Serialize, Deserialize, Debug, Clone)]\npub struct Post {\n    pub title: String,\n    pub link: String,\n    #[serde(rename = \"contentSnippet\")] // Для совместимости с TypeScript\n    pub content_snippet: String,\n    #[serde(rename = \"imageUrl\", skip_serializing_if = \"Option::is_none\")]\n    pub image_url: Option<String>,\n}",
  "backend/src/telegram/routes.rs": "use actix_web::web;\nuse super::handlers;\n\npub fn config(cfg: &mut web::ServiceConfig) {\n    cfg.service(\n        web::scope(\"/telegram\") // Префикс для всех роутов этого модуля\n            .route(\"\", web::get().to(handlers::get_telegram_posts_handler)),\n    );\n}",
  "backend/src/telegram/services.rs": "// backend/src/telegram/services.rs\n\nuse rss::Channel;\nuse crate::errors::{AppResult, AppError};\nuse super::models::Post;\nuse scraper::Html;\nuse async_trait::async_trait;\nuse bytes::Bytes;\n\nconst TELEGRAM_CHANNEL: &str = \"diametrpd\";\n\n// --- Трейт для получения данных ---\n\n#[async_trait]\npub trait RssFetcher {\n    async fn fetch_rss_content(&self, url: &str) -> AppResult<Bytes>;\n}\n\n// --- Реализация для реальных HTTP-запросов ---\n\npub struct RealRssFetcher;\n\n#[async_trait]\nimpl RssFetcher for RealRssFetcher {\n    async fn fetch_rss_content(&self, url: &str) -> AppResult<Bytes> {\n        let response = reqwest::get(url).await?;\n\n        if !response.status().is_success() {\n            let status = response.status();\n            let error_body = response.text().await.unwrap_or_else(|_| \"Could not read error body\".to_string());\n            log::error!(\"External service returned a non-success status: {}. Body: {}\", status, error_body);\n            \n            return Err(AppError::InternalError(format!(\n                \"External service failed with status: {}\",\n                status\n            )));\n        }\n\n        Ok(response.bytes().await?)\n    }\n}\n\n// --- Основная бизнес-логика ---\n\n/// Функция теперь принимает `&(dyn Trait)`, что решает проблему с `Sized`.\npub async fn fetch_telegram_posts(fetcher: &(dyn RssFetcher + Sync)) -> AppResult<Vec<Post>> {\n    let feed_url = format!(\"https://rsshub.app/telegram/channel/{}\", TELEGRAM_CHANNEL);\n    log::info!(\"Fetching RSS feed via fetcher...\");\n\n    let content = fetcher.fetch_rss_content(&feed_url).await?;\n\n    let channel = match Channel::read_from(&content[..]) {\n        Ok(channel) => channel,\n        Err(e) => {\n            let body_as_text = String::from_utf8_lossy(&content);\n            log::error!(\"Failed to parse RSS feed. Original error: {:?}. Response body was: {}\", e, body_as_text);\n            return Err(e.into());\n        }\n    };\n    \n    log::info!(\"Successfully parsed RSS feed for channel: {}\", channel.title());\n\n    let posts: Vec<Post> = channel\n        .items()\n        .iter()\n        .map(|item| {\n            let raw_html_snippet = item.description().unwrap_or_else(|| item.content().unwrap_or(\"\")).to_string();\n            let plain_text_snippet = html_to_plaintext(&raw_html_snippet);\n\n            Post {\n                title: item.title().unwrap_or(\"Без заголовка\").to_string(),\n                link: item.link().unwrap_or(\"#\").to_string(),\n                content_snippet: plain_text_snippet,\n                image_url: extract_image_url(item),\n            }\n        })\n        .collect();\n    \n    log::info!(\"Fetched and processed {} posts\", posts.len());\n    Ok(posts)\n}\n\n// --- Вспомогательные функции ---\n\nfn html_to_plaintext(html_content: &str) -> String {\n    if html_content.is_empty() {\n        return String::new();\n    }\n    let document = Html::parse_fragment(html_content);\n    let text_content = document.root_element().text().collect::<Vec<_>>().join(\" \");\n    text_content.split_whitespace().collect::<Vec<&str>>().join(\" \")\n}\n\nfn extract_image_url(item: &rss::Item) -> Option<String> {\n    if let Some(enclosure) = item.enclosure() {\n        if enclosure.mime_type().starts_with(\"image/\") {\n            return Some(enclosure.url().to_string());\n        }\n    }\n    let content_to_search = item.description().or_else(|| item.content()).unwrap_or(\"\");\n    if content_to_search.is_empty() {\n        return None;\n    }\n    match regex::Regex::new(r#\"<img[^>]+src=[\"']([^\"']+)[\"']\"#) {\n        Ok(re) => {\n            if let Some(cap) = re.captures(content_to_search) {\n                if let Some(url_match) = cap.get(1) {\n                    return Some(url_match.as_str().to_string());\n                }\n            }\n        }\n        Err(e) => {\n            log::error!(\"Regex compilation error in extract_image_url: {}\", e);\n        }\n    }\n    None\n}\n\n// --- Модуль с Unit-тестами ---\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use bytes::Bytes;\n    use std::io;\n\n    // Моковая структура для тестов\n    struct MockRssFetcher {\n        response: AppResult<Bytes>,\n    }\n\n    #[async_trait]\n    impl RssFetcher for MockRssFetcher {\n        async fn fetch_rss_content(&self, _url: &str) -> AppResult<Bytes> {\n            self.response\n                .as_ref()\n                .map(|b| b.clone())\n                .map_err(|e| AppError::IoError(io::Error::new(io::ErrorKind::Other, e.to_string())))\n        }\n    }\n\n    #[tokio::test]\n    async fn test_fetch_posts_success_path() {\n        let fake_rss = r#\"\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <rss version=\"2.0\">\n                <channel>\n                    <title>Test Channel</title>\n                    <item><title>Post 1</title><link>http://a.com/1</link><description>Desc 1</description></item>\n                    <item><title>Post 2</title><link>http://a.com/2</link><description><![CDATA[<p>C</p><img src=\"http://a.com/img.jpg\">]]></description></item>\n                    <item><title></title><link></link><description></description></item>\n                </channel>\n            </rss>\n        \"#;\n        \n        let mock_fetcher = MockRssFetcher {\n            response: Ok(Bytes::from(fake_rss)),\n        };\n\n        let result = fetch_telegram_posts(&mock_fetcher).await;\n        assert!(result.is_ok(), \"Function should return Ok on valid RSS\");\n        \n        let posts = result.unwrap();\n        assert_eq!(posts.len(), 3, \"Should parse all 3 items\");\n        \n        assert_eq!(posts[0].title, \"Post 1\");\n        assert_eq!(posts[0].content_snippet, \"Desc 1\");\n\n        assert_eq!(posts[1].content_snippet, \"C\");\n        assert_eq!(posts[1].image_url, Some(\"http://a.com/img.jpg\".to_string()));\n\n        assert_eq!(posts[2].title, \"Без заголовка\");\n        assert_eq!(posts[2].link, \"#\");\n    }\n\n    #[tokio::test]\n    async fn test_fetch_posts_on_parsing_error() {\n        let fake_response = \"this is not xml\";\n        let mock_fetcher = MockRssFetcher {\n            response: Ok(Bytes::from(fake_response)),\n        };\n\n        let result = fetch_telegram_posts(&mock_fetcher).await;\n        \n        assert!(result.is_err());\n        match result.unwrap_err() {\n            AppError::RssError(_) => (), \n            other => panic!(\"Expected RssError, but got {:?}\", other),\n        }\n    }\n\n    #[tokio::test]\n    async fn test_fetch_posts_on_network_error() {\n        let mock_fetcher = MockRssFetcher {\n            response: Err(AppError::InternalError(\"Simulated network failure\".to_string())),\n        };\n\n        let result = fetch_telegram_posts(&mock_fetcher).await;\n        assert!(result.is_err());\n    }\n    \n    #[test]\n    fn test_html_to_plaintext_conversion() {\n        let html = \"<div> <p>Hello  <b>world</b> & friends</p>\\n<span>!</span> </div>\";\n        assert_eq!(html_to_plaintext(html), \"Hello world & friends !\");\n        assert_eq!(html_to_plaintext(\"\"), \"\");\n    }\n\n    #[test]\n    fn test_image_url_extraction() {\n        // --- Тест 1: Картинка в <description> ---\n        let mut item1 = rss::Item::default();\n        item1.set_description(String::from(\"<p>text</p><img src='http://test.com/image.png' />\"));\n        let result1 = extract_image_url(&item1);\n        assert!(result1.is_some(), \"Test 1 failed\");\n        assert_eq!(result1.unwrap(), \"http://test.com/image.png\");\n\n        // --- Тест 2: Картинка в <content> ---\n        let mut item2 = rss::Item::default();\n        item2.set_content(String::from(\"<img src=\\\"https://another.com/image.gif\\\">\"));\n        let result2 = extract_image_url(&item2);\n        assert!(result2.is_some(), \"Test 2 failed: Should find an image in content\");\n        assert_eq!(result2.unwrap(), \"https://another.com/image.gif\");\n        \n        // --- Тест 3: Картинка из <enclosure> (имеет приоритет) ---\n        let mut item3 = rss::Item::default();\n        item3.set_content(String::from(\"<img src=\\\"ignored.png\\\">\")); // Картинка для игнорирования\n        let mut enclosure = rss::Enclosure::default();\n        enclosure.set_url(\"http://priority.com/enclosure.jpg\".to_string());\n        enclosure.set_mime_type(\"image/jpeg\".to_string());\n        item3.set_enclosure(enclosure);\n        let result3 = extract_image_url(&item3);\n        assert!(result3.is_some(), \"Test 3 failed\");\n        assert_eq!(result3.unwrap(), \"http://priority.com/enclosure.jpg\", \"Enclosure should have priority\");\n        \n        // --- Тест 4: Нет картинки ---\n        let item_no_image = rss::Item::default();\n        assert!(extract_image_url(&item_no_image).is_none(), \"Test 4 failed\");\n    }\n}",
  "backend/tests/api_tests.rs": "use actix_web::{test, web, App, http};\nuse backend::config::config_services;\nuse backend::errors::{AppError, AppResult};\nuse backend::telegram::{models::Post, services::RssFetcher};\nuse async_trait::async_trait;\nuse bytes::Bytes;\nuse std::sync::Arc;\n\n#[derive(Clone)]\nstruct MockSuccessFetcher;\n\n#[async_trait]\nimpl RssFetcher for MockSuccessFetcher {\n    async fn fetch_rss_content(&self, _url: &str) -> AppResult<Bytes> {\n        let fake_rss = r#\"<rss version=\"2.0\"><channel><title>API Test</title><item><title>API Post</title><link>url</link><description>desc</description></item></channel></rss>\"#;\n        Ok(Bytes::from(fake_rss))\n    }\n}\n\n#[derive(Clone)]\nstruct MockErrorFetcher;\n\n#[async_trait]\nimpl RssFetcher for MockErrorFetcher {\n    async fn fetch_rss_content(&self, _url: &str) -> AppResult<Bytes> {\n        Err(AppError::InternalError(\"mock network error\".into()))\n    }\n}\n\n#[actix_web::test]\nasync fn test_get_telegram_posts_api_success() {\n    let mock_fetcher = Arc::new(MockSuccessFetcher);\n    let app = test::init_service(\n        App::new()\n            .app_data(web::Data::from(mock_fetcher as Arc<dyn RssFetcher + Send + Sync>))\n            .configure(config_services),\n    ).await;\n\n    let req = test::TestRequest::get().uri(\"/api/telegram\").to_request();\n    let resp = test::call_service(&app, req).await;\n\n    // Сначала проверяем статус\n    assert_eq!(resp.status(), http::StatusCode::OK);\n\n    // Теперь читаем тело\n    let posts: Vec<Post> = test::read_body_json(resp).await;\n    assert_eq!(posts.len(), 1);\n    assert_eq!(posts[0].title, \"API Post\");\n}\n\n#[actix_web::test]\nasync fn test_get_telegram_posts_api_error_fallback() {\n    let mock_fetcher = Arc::new(MockErrorFetcher);\n    let app = test::init_service(\n        App::new()\n            .app_data(web::Data::from(mock_fetcher as Arc<dyn RssFetcher + Send + Sync>))\n            .configure(config_services),\n    ).await;\n\n    let req = test::TestRequest::get().uri(\"/api/telegram\").to_request();\n    let resp = test::call_service(&app, req).await;\n\n    // Проверяем, что статус 200 (т.к. мы обрабатываем ошибку)\n    assert_eq!(resp.status(), http::StatusCode::OK, \"Status should be 200 OK on fallback\");\n    \n    // Проверяем, что тело - пустой массив\n    let posts: Vec<Post> = test::read_body_json(resp).await;\n    assert_eq!(posts.len(), 0, \"Should return an empty list on service error\");\n}\n\n#[actix_web::test]\nasync fn test_dummy_handler() {\n    // Инициализируем приложение без моков\n    let app = test::init_service(\n        App::new().configure(config_services)\n    ).await;\n\n    let req = test::TestRequest::get().uri(\"/api/telegram\").to_request();\n    let resp = test::call_service(&app, req).await;\n\n    // Проверяем статус\n    assert_eq!(resp.status(), http::StatusCode::OK);\n\n    // Читаем тело и проверяем содержимое\n    let posts: Vec<Post> = test::read_body_json(resp).await;\n    assert_eq!(posts.len(), 1);\n    assert_eq!(posts[0].title, \"Hardcoded Post\");\n}",
  "docker-compose.local.yml": "version: '3.8'\n\nservices:\n  frontend:\n    build:\n      context: ./frontend\n    container_name: website_frontend_local\n    ports:\n      - \"3000\"\n    environment:\n      - RUST_BACKEND_URL=http://website_backend_local:8080/ \n    networks:\n      - app_network\n    restart: unless-stopped # Можно убрать для локального теста, если не хотите автоперезапуска\n    depends_on:\n      - backend\n\n  backend:\n    build:\n      context: ./backend\n    container_name: website_backend_local\n    ports:\n      - \"8080\"\n    environment:\n      - RUST_LOG=${RUST_LOG_LEVEL:-debug}\n    networks:\n      - app_network\n    restart: unless-stopped # Можно убрать для локального теста\n\n  nginx:\n    image: nginx:latest \n    container_name: website_nginx_local\n    ports:\n      - \"80:80\" \n      - \"443:443\"\n    volumes:\n      - ./nginx.conf.local:/etc/nginx/nginx.conf:ro\n      - /home/diametrfq/certs:/certs:ro\n    depends_on:\n      - frontend\n      - backend\n    networks:\n      - app_network\n    restart: unless-stopped # Можно убрать для локального теста\n\nnetworks:\n  app_network:\n    driver: bridge\n",
  "docker-compose.yml": "version: '3.8'\n\nservices:\n  frontend:\n    image: diametrfq/website:latest\n    container_name: website_frontend\n    ports:\n      - \"3000\"\n    environment:\n      - RUST_BACKEND_URL=http://website-backend:8080/\n    networks:\n      - app_network\n    restart: unless-stopped\n    depends_on:\n      - backend\n\n  backend:\n    image: diametrfq/website-backend:latest\n    container_name: website_backend\n    ports:\n      - \"8080\"\n    environment:\n      - RUST_LOG=${RUST_LOG_LEVEL:-debug}\n    networks:\n      - app_network\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:latest \n    container_name: website_nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf.prod:/etc/nginx/nginx.conf:ro\n      - /etc/letsencrypt:/etc/letsencrypt:ro \n      - /var/www/certbot:/var/www/certbot:ro \n    depends_on:\n      - frontend\n      - backend\n    networks:\n      - app_network\n    restart: unless-stopped # Можно убрать для локального теста\n\nnetworks:\n  app_network:\n    # driver: bridge\n",
  "frontend/.dockerignore": "# dependencies\n/node_modules\nREADME.md\n.gitignore",
  "frontend/.gitignore": "# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.*\n.yarn/*\n!.yarn/patches\n!.yarn/plugins\n!.yarn/releases\n!.yarn/versions\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n.pnpm-debug.log*\n\n# env files (can opt-in for committing if needed)\n.env*\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n\ncertificates\ngetPrompt.js\nfile_index.json",
  "frontend/Dockerfile": "FROM node:22-alpine\nWORKDIR /app\nCOPY . .\nEXPOSE 3000\nRUN npm ci --omit=dev\nRUN npm run build\nCMD [\"npm\", \"run\", \"start\"]",
  "frontend/README.md": "This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n",
  "frontend/app/[locale]/about/page.module.css": ".page {\n  --gray-rgb: 0, 0, 0;\n  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);\n  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);\n\n  --button-primary-hover: #383838;\n  --button-secondary-hover: #f2f2f2;\n\n  display: grid;\n  grid-template-rows: 20px 1fr 20px;\n  align-items: center;\n  justify-items: center;\n  min-height: 100svh;\n  padding: 80px;\n  gap: 64px;\n  font-family: var(--font-geist-sans);\n}\n\n@media (prefers-color-scheme: dark) {\n  .page {\n    --gray-rgb: 255, 255, 255;\n    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);\n    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);\n\n    --button-primary-hover: #ccc;\n    --button-secondary-hover: #1a1a1a;\n  }\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  grid-row-start: 2;\n}\n\n.main ol {\n  font-family: var(--font-geist-mono);\n  padding-left: 0;\n  margin: 0;\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.01em;\n  list-style-position: inside;\n}\n\n.main li:not(:last-of-type) {\n  margin-bottom: 8px;\n}\n\n.main code {\n  font-family: inherit;\n  background: var(--gray-alpha-100);\n  padding: 2px 4px;\n  border-radius: 4px;\n  font-weight: 600;\n}\n\n.ctas {\n  display: flex;\n  gap: 16px;\n}\n\n.ctas a {\n  appearance: none;\n  border-radius: 128px;\n  height: 48px;\n  padding: 0 20px;\n  border: none;\n  border: 1px solid transparent;\n  transition:\n    background 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\na.primary {\n  background: var(--foreground);\n  color: var(--background);\n  gap: 8px;\n}\n\na.secondary {\n  border-color: var(--gray-alpha-200);\n  min-width: 180px;\n}\n\n.footer {\n  grid-row-start: 3;\n  display: flex;\n  gap: 24px;\n}\n\n.footer a {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.footer img {\n  flex-shrink: 0;\n}\n\n/* Enable hover only on non-touch devices */\n@media (hover: hover) and (pointer: fine) {\n  a.primary:hover {\n    background: var(--button-primary-hover);\n    border-color: transparent;\n  }\n\n  a.secondary:hover {\n    background: var(--button-secondary-hover);\n    border-color: transparent;\n  }\n\n  .footer a:hover {\n    text-decoration: underline;\n    text-underline-offset: 4px;\n  }\n}\n\n@media (max-width: 600px) {\n  .page {\n    padding: 32px;\n    padding-bottom: 80px;\n  }\n\n  .main {\n    align-items: center;\n  }\n\n  .main ol {\n    text-align: center;\n  }\n\n  .ctas {\n    flex-direction: column;\n  }\n\n  .ctas a {\n    font-size: 14px;\n    height: 40px;\n    padding: 0 16px;\n  }\n\n  a.secondary {\n    min-width: auto;\n  }\n\n  .footer {\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  .logo {\n    filter: invert();\n  }\n}\n",
  "frontend/app/[locale]/about/page.tsx": "'use client';\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\n\nexport default function ResumePage() {\n  const [showContact, setShowContact] = useState(false);\n\n  return (\n    <div style={{ maxWidth: '800px', margin: '0 auto', fontFamily: 'Arial, sans-serif', lineHeight: '1.6' }}>\n      <header style={{ textAlign: 'center', padding: '20px 0' }}>\n        <h1>Хохлов Дмитрий</h1>\n        <p>Frontend Developer (React)</p>\n        <button onClick={() => setShowContact(!showContact)} style={{ padding: '10px 15px', cursor: 'pointer' }}>\n          {showContact ? 'Скрыть контакты' : 'Показать контакты'}\n        </button>\n        {showContact && (\n          <div>\n            <p>Телефон: +7 (932) 477-0975</p>\n            <p>Email: hohlov.03@inbox.ru</p>\n            <p>Telegram: @diametrfq</p>\n          </div>\n        )}\n      </header>\n\n      <table align=\"right\">\n            <tbody>\n\n        <tr>\n          <th>       \n            <div>\n              <Image src=\"https://www.codewars.com/users/DiametrFQ/badges/small\" width={100} height={100} alt='Codewars stats'/><br/>\n              <Image src=\"https://streak-stats.demolab.com?user=DiametrFQ&theme=github-dark-blue&border_radius=6&card_width=300&type=png\" width={300} height={300} alt=\"GitHub Streak\"/><br/>\n              <Image src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=DiametrFQ&layout=donut-vertical\" width={300} height={300} alt=\"GitHub Lengs\"/><br/>\n            </div>\n          </th>\n        </tr>\n            </tbody>\n      </table>\n      \n      <section>\n        <h2>Обо мне</h2>\n        <p>\n          Я опытный frontend разработчик с более чем четырехлетним опытом в создании\n          эффективных веб-приложений. Мои навыки охватывают весь цикл разработки, от концепции и дизайна до реализации и поддержки.\n        </p>\n        <p>\n          Активно следую за последними тенденциями веб-разработки, увлечен созданием чистого, эффективного и масштабируемого кода.\n        </p>\n      </section>\n\n      <section>\n        <h2>Опыт работы</h2>\n        <p><strong>Junior FullStack Developer</strong> – Cyberia (апрель 2024 - настоящее время)</p>\n        <p>Дорабатываю разные штуки.</p>\n      </section>\n\n      <section>\n        <h2>Образование</h2>\n        <p><strong>РТУ МИРЭА</strong> (2025) – Институт кибербезопасности и цифровых технологий, Информационные системы и технологии</p>\n      </section>\n\n      <section>\n        <h2>Навыки</h2>\n        <p>TypeScript, JavaScript, React, Git, Node.js, HTML5, CSS3, SOLID, Redux, ООП, SCSS, BEM</p>\n      </section>\n\n      <section>\n        <h2>Проекты</h2>\n        <p>Все мои проекты вы можете оценить на <Link href=\"https://github.com/DiametrFQ\" target=\"_blank\">GitHub</Link>.</p>\n      </section>\n      \n      <div>\n        📫 Connect with me:<br/>\n        <div className='flex'>\n          NO\n          {/* <a href=\"https://t.me/diametrfq\" target=\"_blank\">\n            <Image className='h-10' src=\"https://upload.wikimedia.org/wikipedia/commons/8/82/Telegram_logo.svg\" alt=\"Telegram link\"/>\n          </a>\n          <a href=\"https://linkedin.com/in/diametrfq\" target=\"_blank\">\n            <Image className='h-10' src=\"https://static-00.iconduck.com/assets.00/linkedin-icon-1024x1024-net2o24e.png\" alt=\"LinkedIn link\"/>\n          </a>\n          <a href=\"mailto:hohlov.03@inbox.ru\" target=\"_blank\">\n            <Image className='h-10' src=\"https://cdn.pixabay.com/photo/2016/06/13/17/30/mail-1454731_1280.png\" alt=\"email link\"/>\n          </a> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "frontend/app/[locale]/contact/page.module.css": ".page {\n  --gray-rgb: 0, 0, 0;\n  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);\n  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);\n\n  --button-primary-hover: #383838;\n  --button-secondary-hover: #f2f2f2;\n\n  display: grid;\n  grid-template-rows: 20px 1fr 20px;\n  align-items: center;\n  justify-items: center;\n  min-height: 100svh;\n  padding: 80px;\n  gap: 64px;\n  font-family: var(--font-geist-sans);\n}\n\n@media (prefers-color-scheme: dark) {\n  .page {\n    --gray-rgb: 255, 255, 255;\n    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);\n    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);\n\n    --button-primary-hover: #ccc;\n    --button-secondary-hover: #1a1a1a;\n  }\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  grid-row-start: 2;\n}\n\n.main ol {\n  font-family: var(--font-geist-mono);\n  padding-left: 0;\n  margin: 0;\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.01em;\n  list-style-position: inside;\n}\n\n.main li:not(:last-of-type) {\n  margin-bottom: 8px;\n}\n\n.main code {\n  font-family: inherit;\n  background: var(--gray-alpha-100);\n  padding: 2px 4px;\n  border-radius: 4px;\n  font-weight: 600;\n}\n\n.ctas {\n  display: flex;\n  gap: 16px;\n}\n\n.ctas a {\n  appearance: none;\n  border-radius: 128px;\n  height: 48px;\n  padding: 0 20px;\n  border: none;\n  border: 1px solid transparent;\n  transition:\n    background 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\na.primary {\n  background: var(--foreground);\n  color: var(--background);\n  gap: 8px;\n}\n\na.secondary {\n  border-color: var(--gray-alpha-200);\n  min-width: 180px;\n}\n\n.footer {\n  grid-row-start: 3;\n  display: flex;\n  gap: 24px;\n}\n\n.footer a {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.footer img {\n  flex-shrink: 0;\n}\n\n/* Enable hover only on non-touch devices */\n@media (hover: hover) and (pointer: fine) {\n  a.primary:hover {\n    background: var(--button-primary-hover);\n    border-color: transparent;\n  }\n\n  a.secondary:hover {\n    background: var(--button-secondary-hover);\n    border-color: transparent;\n  }\n\n  .footer a:hover {\n    text-decoration: underline;\n    text-underline-offset: 4px;\n  }\n}\n\n@media (max-width: 600px) {\n  .page {\n    padding: 32px;\n    padding-bottom: 80px;\n  }\n\n  .main {\n    align-items: center;\n  }\n\n  .main ol {\n    text-align: center;\n  }\n\n  .ctas {\n    flex-direction: column;\n  }\n\n  .ctas a {\n    font-size: 14px;\n    height: 40px;\n    padding: 0 16px;\n  }\n\n  a.secondary {\n    min-width: auto;\n  }\n\n  .footer {\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  .logo {\n    filter: invert();\n  }\n}\n",
  "frontend/app/[locale]/contact/page.tsx": "import styles from \"./page.module.css\";\n\nexport default function Portfolio() {\n  return (\n    <div className={styles.page}>\n      contact\n    </div>\n  );\n}\n",
  "frontend/app/[locale]/dashboard/page.tsx": "import { AppSidebar } from \"@/components/app-sidebar\"\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  SidebarInset,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar7\"\n\nexport default function Page() {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <SidebarInset>\n        <header className=\"flex h-16 shrink-0 items-center gap-2\">\n          <div className=\"flex items-center gap-2 px-4\">\n            <SidebarTrigger className=\"-ml-1\" />\n            <Separator orientation=\"vertical\" className=\"mr-2 h-4\" />\n            <Breadcrumb>\n              <BreadcrumbList>\n                <BreadcrumbItem className=\"hidden md:block\">\n                  <BreadcrumbLink href=\"#\">\n                    Building Your Application\n                  </BreadcrumbLink>\n                </BreadcrumbItem>\n                <BreadcrumbSeparator className=\"hidden md:block\" />\n                <BreadcrumbItem>\n                  <BreadcrumbPage>Data Fetching</BreadcrumbPage>\n                </BreadcrumbItem>\n              </BreadcrumbList>\n            </Breadcrumb>\n          </div>\n        </header>\n        <div className=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\n          <div className=\"grid auto-rows-min gap-4 md:grid-cols-3\">\n            <div className=\"aspect-video rounded-xl bg-muted/50\" />\n            <div className=\"aspect-video rounded-xl bg-muted/50\" />\n            <div className=\"aspect-video rounded-xl bg-muted/50\" />\n          </div>\n          <div className=\"min-h-[100vh] flex-1 rounded-xl bg-muted/50 md:min-h-min\" />\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  )\n}\n",
  "frontend/app/[locale]/layout.tsx": "/* eslint-disable @next/next/no-page-custom-font */\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport StoreProvider from \"@/store/StoreProvider\";\nimport { SidebarInset, SidebarProvider } from '@/components/ui/sidebar7';\nimport { NextIntlClientProvider } from 'next-intl';\nimport { getMessages, unstable_setRequestLocale } from 'next-intl/server';\nimport Header from '../_components/Header/Header';\nimport Sidebar from '../_components/Sidebar/Sidebar'; \nimport '../_styles/globals.css';\nimport { GoogleAnalytics } from '@next/third-parties/google'\nimport Script from \"next/script.js\";\nimport { locales as appLocales } from '@/types/i18n';\nimport \"@fontsource/material-symbols-outlined\"\n\ntype Props = {\n  children: React.ReactNode;\n  params: Promise<{ locale: string }>;\n};\n\nexport function generateStaticParams() {\n  return appLocales.map((locale) => ({locale}));\n}\n\nexport default async function LocaleLayout({ children, params }: Props) { \n  const { locale } = await params;\n  \n  unstable_setRequestLocale(locale);\n  const messages = await getMessages();\n\n  return (\n    <html lang={locale} suppressHydrationWarning>\n      <head>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&display=swap\"\n        />\n\n        <Script\n          id=\"yandex-metrika\"\n          strategy=\"afterInteractive\"\n          dangerouslySetInnerHTML={{\n            __html: `\n              (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};\n              m[i].l=1*new Date();\n              for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}\\n\n              k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})\\n\n              (window, document, \"script\", \"https://mc.yandex.ru/metrika/tag.js\", \"ym\");\\n\n\n              ym(102356747, \"init\", {\\n\n                    clickmap:true,\\n\n                    trackLinks:true,\\n\n                    accurateTrackBounce:true,\\n\n                    webvisor:true\\n\n              });\\n\n            `\n          }}\n        />\n      </head>\n      <GoogleAnalytics gaId=\"G-7VQWEH45FM\"/>\n      <body>\n        <StoreProvider> {/* Redux нужен для других вещей, например, счетчика */}\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"dark\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            <NextIntlClientProvider locale={locale} messages={messages}>\n              <SidebarProvider>\n                <Sidebar/>\n                <SidebarInset>\n                  <div>\n                    <Header />\n                    <main className=\"p-5\">{children}</main>\n                  </div>\n                </SidebarInset>\n              </SidebarProvider>\n            </NextIntlClientProvider>\n          </ThemeProvider>\n        </StoreProvider>\n      </body>\n    </html>\n  );\n}",
  "frontend/app/[locale]/page.tsx": "import Image from \"next/image\";\nimport styles from \"../_styles/page.module.css\";\n\nexport default function Home() {\n  return (\n    <div className={styles.page}>\n      <main className={styles.main}>\n        <Image\n          className={styles.logo}\n          src=\"/next.svg\"\n          alt=\"Next.js logo\"\n          width={180}\n          height={38}\n          priority\n        />\n        <ol>\n          <li>\n            Get started by editing <code>src/app/page.tsx</code>.\n          </li>\n          <li>Save and see your changes instantly.</li>\n        </ol>\n\n        <div className={styles.ctas}>\n          <a\n            className={styles.primary}\n            href=\"https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Image\n              className={styles.logo}\n              src=\"/vercel.svg\"\n              alt=\"Vercel logomark\"\n              width={20}\n              height={20}\n            />\n            Deploy now\n          </a>\n          <a\n            href=\"https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className={styles.secondary}\n          >\n            Read our docs\n          </a>\n        </div>\n      </main>\n      <footer className={styles.footer}>\n        <a\n          href=\"https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Image\n            aria-hidden\n            src=\"/file.svg\"\n            alt=\"File icon\"\n            width={16}\n            height={16}\n          />\n          Learn\n        </a>\n        <a\n          href=\"https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Image\n            aria-hidden\n            src=\"/window.svg\"\n            alt=\"Window icon\"\n            width={16}\n            height={16}\n          />\n          Examples\n        </a>\n        <a\n          href=\"https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Image\n            aria-hidden\n            src=\"/globe.svg\"\n            alt=\"Globe icon\"\n            width={16}\n            height={16}\n          />\n          Go to nextjs.org →\n        </a>\n      </footer>\n    </div>\n  );\n}\n",
  "frontend/app/[locale]/portfolio/page.module.css": ".page {\n  --gray-rgb: 0, 0, 0;\n  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);\n  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);\n\n  --button-primary-hover: #383838;\n  --button-secondary-hover: #f2f2f2;\n\n  display: grid;\n  grid-template-rows: 20px 1fr 20px;\n  align-items: center;\n  justify-items: center;\n  min-height: 100svh;\n  padding: 80px;\n  gap: 64px;\n  font-family: var(--font-geist-sans);\n}\n\n@media (prefers-color-scheme: dark) {\n  .page {\n    --gray-rgb: 255, 255, 255;\n    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);\n    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);\n\n    --button-primary-hover: #ccc;\n    --button-secondary-hover: #1a1a1a;\n  }\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  grid-row-start: 2;\n}\n\n.main ol {\n  font-family: var(--font-geist-mono);\n  padding-left: 0;\n  margin: 0;\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.01em;\n  list-style-position: inside;\n}\n\n.main li:not(:last-of-type) {\n  margin-bottom: 8px;\n}\n\n.main code {\n  font-family: inherit;\n  background: var(--gray-alpha-100);\n  padding: 2px 4px;\n  border-radius: 4px;\n  font-weight: 600;\n}\n\n.ctas {\n  display: flex;\n  gap: 16px;\n}\n\n.ctas a {\n  appearance: none;\n  border-radius: 128px;\n  height: 48px;\n  padding: 0 20px;\n  border: none;\n  border: 1px solid transparent;\n  transition:\n    background 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\na.primary {\n  background: var(--foreground);\n  color: var(--background);\n  gap: 8px;\n}\n\na.secondary {\n  border-color: var(--gray-alpha-200);\n  min-width: 180px;\n}\n\n.footer {\n  grid-row-start: 3;\n  display: flex;\n  gap: 24px;\n}\n\n.footer a {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.footer img {\n  flex-shrink: 0;\n}\n\n/* Enable hover only on non-touch devices */\n@media (hover: hover) and (pointer: fine) {\n  a.primary:hover {\n    background: var(--button-primary-hover);\n    border-color: transparent;\n  }\n\n  a.secondary:hover {\n    background: var(--button-secondary-hover);\n    border-color: transparent;\n  }\n\n  .footer a:hover {\n    text-decoration: underline;\n    text-underline-offset: 4px;\n  }\n}\n\n@media (max-width: 600px) {\n  .page {\n    padding: 32px;\n    padding-bottom: 80px;\n  }\n\n  .main {\n    align-items: center;\n  }\n\n  .main ol {\n    text-align: center;\n  }\n\n  .ctas {\n    flex-direction: column;\n  }\n\n  .ctas a {\n    font-size: 14px;\n    height: 40px;\n    padding: 0 16px;\n  }\n\n  a.secondary {\n    min-width: auto;\n  }\n\n  .footer {\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  .logo {\n    filter: invert();\n  }\n}\n",
  "frontend/app/[locale]/portfolio/page.tsx": "import styles from \"./page.module.css\";\n\nexport default function Portfolio() {\n  return (\n    <div className={styles.page}>\n      portfolio\n    </div>\n  );\n}\n",
  "frontend/app/[locale]/telegram/components/PostList.tsx": "'use client';\n\nimport React from 'react';\nimport styles from '../styles/page.module.css';\nimport Image from 'next/image';\n\ninterface Post {\n  title: string;\n  link: string;\n  contentSnippet: string;\n  imageUrl?: string;\n}\n\nconst PostItem: React.FC<{ post: Post }> = ({ post }) => {\n  return (\n    <div className={styles['post-card']}>\n      {post.imageUrl && (\n        <div className={styles['post-image']}>\n          <Image className=\"invert-0 dark:invert\" src={post.imageUrl} alt={post.title} width={300} height={300}/>\n        </div>\n      )}\n      <h3 className={styles['post-title']}>\n        <a href={post.link} target=\"_blank\" rel=\"noopener noreferrer\">\n          {post.title}\n        </a>\n      </h3>\n      <p className={styles['post-snippet']}>{post.contentSnippet}</p>\n    </div>\n  );\n};\n\nconst PostList: React.FC<{ posts: Post[] }> = ({ posts }) => {\n  return (\n    <div className={styles['post-list']}>\n      {posts.map((post, index) => (\n        <PostItem key={index} post={post} />\n      ))}\n    </div>\n  );\n};\n\nexport default PostList;\n",
  "frontend/app/[locale]/telegram/components/TelegramPosts.tsx": "'use client';\nimport { useEffect, useState } from 'react';\nimport PostList from './PostList';\n\n// Описание типа для постов\ninterface Post {\n  title: string;\n  link: string;\n  contentSnippet: string;\n  imageUrl?: string;\n}\n\nconst TelegramPosts: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    fetch('/api/telegram')\n      .then((res) => res.json())\n      .then((data) => {\n        if(data.data)\n          setPosts(data.data)\n        else\n          setPosts(data)\n      })\n      .catch((err) => console.error('Ошибка загрузки:', err));\n  }, []);\n\n  return (\n    <div className=\"dark:invert\">\n      <h2 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '16px' }}>Последние посты из Telegram</h2>\n      <ul style={{ listStyle: 'none', padding: 0 }}>\n        {Array.isArray(posts) && posts.map((post, index) => (\n          <PostList key={index} posts={[post]} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TelegramPosts;\n",
  "frontend/app/[locale]/telegram/page.tsx": "import TelegramPosts from '@/app/[locale]/telegram/components/TelegramPosts';\nimport { Metadata } from 'next';\nimport \"./styles/globals.css\";\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nconst Home: React.FC = () => {\n  return (\n    <div style={{ maxWidth: '800px', margin: '0 auto', padding: '20px'}}>\n      <TelegramPosts />\n    </div>\n  );\n};\n\nexport default Home;",
  "frontend/app/[locale]/telegram/styles/globals.css": "body {\n  background-color: #000000;\n  background-image: url('/pattern.svg') repeat;\n  background-size: cover;\n  color: #333;\n}\n",
  "frontend/app/[locale]/telegram/styles/page.module.css": "/* Основной контейнер для страницы */\n.page {\n  font-family: 'Arial', sans-serif;\n  background-color: #f5f5f5;\n  color: #333;\n  padding: 0 20px;\n}\n\n/* Стиль для основного блока на странице */\n.main {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Логотип и другие элементы */\n.logo {\n  max-width: 180px;\n}\n\n/* Список постов */\n.post-list {\n  margin-top: 30px;\n  background-color: #1e1e1e;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n}\n\n.post-card {\n  display: flex;\n  flex-direction: column;\n}\n\n.post-title {\n  padding: 0 15px;\n  font-size: 18px;\n  font-weight: bold;\n  color: #e0d5d5;\n  margin: 10px 0 5px 0;\n}\n\n.post-title a {\n  text-decoration: none;\n  color: inherit;\n}\n\n.post-title a:hover {\n  color: #0078e7;\n}\n\n.post-snippet {\n  padding: 0 15px;\n  font-size: 18px;\n  color: #777;\n  line-height: 1.4;\n  margin: 5px 0 10px 0;\n}\n\n.post-image img {\n  width: 100%;\n  height: auto;\n  border-radius: 8px 8px 0 0;\n}\n\n/* Footer */\n.footer {\n  display: flex;\n  justify-content: space-between;\n  padding: 10px;\n  margin-top: 20px;\n  border-top: 1px solid #e0e0e0;\n}\n\n.footer a {\n  font-size: 14px;\n  color: #0078e7;\n  text-decoration: none;\n}\n\n.footer a:hover {\n  text-decoration: underline;\n}",
  "frontend/app/_components/Header/Header.tsx": "import Link from 'next/link.js';\nimport styles from './header.module.css';\nimport { ThemeSwitcher } from './_comonents/ThemeSwitcher/ThemeSwitcher';\nimport { LanguageSwitcher } from './_comonents/LanguageSwitcher/LanguageSwitcher';\nimport { MusicButton } from './_comonents/MusicButton/MusicButton';\n\nconst Header = () => {\n  return (\n    <header className={styles.header}>\n      <Link href=\"/\">\n        <span className={styles.logo}>DiametrFQ</span>\n      </Link>\n      <div className={styles.options}>\n        <MusicButton />\n        <LanguageSwitcher />\n        <ThemeSwitcher />\n      </div>\n    </header>\n  );\n};\n\nexport default Header;",
  "frontend/app/_components/Header/_comonents/LanguageSwitcher/LanguageSwitcher.tsx": "'use client'\n\nimport { Button } from \"@/components/ui/button\"\nimport { useLocale } from \"next-intl\"\nimport { locale as LocaleType } from \"@/types/i18n\";\nimport { usePathname, useRouter } from \"next/navigation\"; \nimport { useTransition } from 'react';\nimport { locales } from '@/types/i18n'; // Для переключения на следующую локаль\n\nexport function LanguageSwitcher() {\n  const currentLocale = useLocale() as LocaleType;\n  const router = useRouter();\n  const currentPathname = usePathname(); // Это будет ПОЛНЫЙ pathname, включая локаль (например, /en/about)\n  const [isPending, startTransition] = useTransition();\n\n  const switchLocale = (newLocale: LocaleType) => {\n    if (newLocale === currentLocale || isPending) return;\n    \n    startTransition(() => {\n      // При использовании хуков из next/navigation, нужно вручную убирать старый префикс локали\n      // и добавлять новый, если он не совпадает с текущим.\n      // Или, если next-intl middleware настроен правильно, он сам может справиться с редиректом.\n\n      // Простой способ: router.replace с новым URL\n      // Убираем текущий префикс локали из currentPathname, если он есть\n      let pathnameWithoutLocale = currentPathname;\n      if (currentPathname.startsWith(`/${currentLocale}`)) {\n        pathnameWithoutLocale = currentPathname.substring(`/${currentLocale}`.length);\n        if (pathnameWithoutLocale === '') pathnameWithoutLocale = '/'; // для корневого пути\n      }\n      \n      router.replace(`/${newLocale}${pathnameWithoutLocale === '/' && newLocale !== 'en' ? '' : pathnameWithoutLocale}`);\n      // router.refresh(); // Может понадобиться для обновления данных на сервере\n    });\n  }\n\n  const getNextLocale = () => {\n    const currentIndex = locales.indexOf(currentLocale);\n    return locales[(currentIndex + 1) % locales.length];\n  }\n\n  return (\n    <Button \n      className=\"rounded-full\" \n      // onClick={() => switchLocale(currentLocale === 'en' ? 'ru' : 'en')} \n      onClick={() => switchLocale(getNextLocale())}\n      variant=\"outline\" \n      size=\"icon\"\n      disabled={isPending}\n    >\n      {currentLocale.toUpperCase() === 'EN' ? 'RU' : 'EN'}\n    </Button>\n  )\n}",
  "frontend/app/_components/Header/_comonents/MusicButton/MusicButton.tsx": "'use client'\n\nimport { Button } from \"@/components/ui/button\"\nimport Image from \"next/image\"\nimport { useState, useRef, useEffect } from \"react\"\n\nconst MUSIC_VOLLUME_CHENGE = 0.03\nconst MUSIC_VOLLUME_MAX = 0.3\n\nconst musicTracks = [\n  \"breezehome.mp3\",\n  \"getting better.mp3\",\n  \"soul gem.mp3\",\n].map((name) => `/music/${name}`)\n\nexport function MusicButton() {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [fadeOut, setFadeOut] = useState(false)\n  const [fadeIn, setFadeIn] = useState(false)\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0)\n  const audioRef = useRef<HTMLAudioElement | null>(null)\n\n  useEffect(() => {\n    let fadeInterval: NodeJS.Timeout | null = null\n\n    if (fadeOut && audioRef.current) {\n      fadeInterval = setInterval(() => {\n        if (audioRef.current && audioRef.current.volume > 0) {\n          audioRef.current.volume = Math.max(audioRef.current.volume - MUSIC_VOLLUME_CHENGE, 0)\n        } else {\n          clearInterval(fadeInterval!)\n          setIsPlaying(false)\n          setFadeOut(false)\n          audioRef.current!.pause()\n        }\n      }, 100)\n    }\n\n    return () => {\n      if (fadeInterval) clearInterval(fadeInterval)\n    }\n  }, [fadeOut])\n\n  useEffect(() => {\n    let fadeInInterval: NodeJS.Timeout | null = null\n\n    if (fadeIn && audioRef.current) {\n      fadeInInterval = setInterval(() => {\n        if (audioRef.current && audioRef.current.volume < 1) {\n          audioRef.current.volume = Math.min(audioRef.current.volume + MUSIC_VOLLUME_CHENGE, MUSIC_VOLLUME_MAX)\n        } else {\n          clearInterval(fadeInInterval!)\n        }\n      }, 100)\n    }\n\n    return () => {\n      if (fadeInInterval) clearInterval(fadeInInterval)\n    }\n  }, [fadeIn])\n\n  const playNextTrack = () => {\n    const nextTrackIndex = (currentTrackIndex + 1) % musicTracks.length\n    setCurrentTrackIndex(nextTrackIndex)\n\n    if (audioRef.current) {\n      audioRef.current.src = musicTracks[nextTrackIndex]\n      audioRef.current.play()\n      setIsPlaying(true)\n      setFadeIn(true)\n      setFadeOut(false)\n    }\n  }\n\n  const toggleMusic = () => {\n    if (audioRef.current) {\n      if (isPlaying) {\n        setFadeIn(false)\n        setFadeOut(true)\n      } else {\n        audioRef.current.play()\n        setIsPlaying(true)\n        setFadeIn(true)\n        setFadeOut(false)\n      }\n    }\n  }\n\n  const onTrackEnded = () => {\n    playNextTrack()\n  }\n\n  return (\n    <div>\n      <Button className=\"dark:bg-white dark:border-white dark:invert rounded-full\" onClick={toggleMusic} variant=\"outline\" size=\"icon\">\n        <Image src={\"/music.png\"} width={20} height={20} alt={\"Music\"} />\n      </Button>\n\n      <audio\n        ref={audioRef}\n        src={musicTracks[currentTrackIndex]}\n        preload=\"auto\"\n        onEnded={onTrackEnded}\n      />\n    </div>\n  )\n}",
  "frontend/app/_components/Header/_comonents/ThemeSwitcher/ThemeSwitcher.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport { Button } from \"@/components/ui/button\"\n\nexport function ThemeSwitcher() {\n  const { setTheme, theme } = useTheme()\n\n  switch (theme) {\n    case 'light' :\n      return <Button className=\"rounded-full\" onClick={() => setTheme(\"dark\")} variant=\"outline\" size=\"icon\">\n        <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0 rounded-full\" />\n      </Button>\n\n    default:\n      return <Button className=\"rounded-full\" onClick={() => setTheme(\"light\")} variant=\"outline\" size=\"icon\">\n        <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100 rounded-full\" />\n      </Button>\n  }\n}\n",
  "frontend/app/_components/Header/header.module.css": ".header {\n  background-color: var(--background);\n  padding: 10px 20px;\n  display: flex;\n  color: var(--foreground);\n  display: flex;\n  justify-content: space-between;\n}\n\n.logo {\n  font-size: 2rem;\n  font-weight: bold;\n  letter-spacing: 2px;\n  height: 100%;\n  display: flex;\n  align-items: center;\n}\n\n@media (max-width: 420px) {\n  .logo {\n    font-size: 18px;\n  }\n}\n\n.menuButton {\n  border-radius: 16px;\n  border: none;\n  font-size: 2rem;\n  color: white;\n  background-color: none;\n  cursor: pointer;\n  background-color: var(--background);\n  transition: margin 700ms;\n}\n\n.options {\n  display: flex;\n  flex-direction: row;\n  gap: 5px;\n  justify-content: center;\n  align-items: center;\n}",
  "frontend/app/_components/Sidebar/Sidebar.tsx": "'use client'\n\nimport { Sidebar, SidebarContent, SidebarGroup, SidebarGroupContent, SidebarHeader, SidebarMenu, SidebarMenuButton, SidebarMenuItem } from '@/components/ui/sidebar7';\nimport { DropdownMenu, DropdownMenuTrigger } from '@radix-ui/react-dropdown-menu';\nimport { useLocale, useTranslations } from 'next-intl';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport ToggleSidebarButton from './components/ToggleSidebarButton';\nimport './styles/global.css';\n\nconst items = [\n  { title: 'home', url: '/', iconName: 'home' },\n  { title: 'about', url: '/about', iconName: 'docs' },\n  { title: 'portfolio', url: '/portfolio', iconName: 'groups' },\n  { title: 'contact', url: '/contact', iconName: 'groups' },\n  { title: 'telegram', url: '/telegram', iconName: 'groups' },\n]\n\nconst onlyEng = items.filter(item => item.title !== 'telegram').map(item => item.title);\n\nexport default function AppSidebar() {\n  const pathname = usePathname();\n  const locale = useLocale();\n\n  const t = useTranslations('SidebarNavigation');\n\n  return (\n    <Sidebar variant=\"floating\">\n      <SidebarHeader>\n        <ToggleSidebarButton />\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {items.map((item) => (\n                (locale === 'en' && onlyEng.includes(item.title) || locale === 'ru') &&\n                <SidebarMenuItem key={item.title} className='stroke-pink-700'>\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <SidebarMenuButton asChild>\n                        <Link\n                          href={`/${locale}${item.url}`}\n                          className={pathname === `/${locale}${item.url}` ? 'bg-black dark:bg-white' : ''}\n                        >\n                          <span className=\"material-symbols-outlined\">{item.iconName}</span>\n                          <span>{t(`${item.title}.title`)}</span>\n                        </Link>\n                      </SidebarMenuButton>\n                    </DropdownMenuTrigger>\n                  </DropdownMenu>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n};\n",
  "frontend/app/_components/Sidebar/components/ToggleSidebarButton.tsx": "import SVGImageElement from 'next/image';\nimport { useSidebar } from '@/components/ui/sidebar7';\nimport style from './styles/toggleSidebarButton.module.css';\n\nconst ToggleSidebarButton = () => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <div onClick={toggleSidebar} className={style.toggleButton}>\n      <SVGImageElement \n        className='m-auto my-px'\n        src=\"/burger.svg\" \n        alt=\"☰\" \n        width={36} \n        height={36}\n      />\n    </div>\n  );\n};\n\nexport default ToggleSidebarButton;",
  "frontend/app/_components/Sidebar/components/styles/toggleSidebarButton.module.css": ".toggleButton {\n  /* pointer-events: auto; */\n  font-family: \"Material Symbols Outlined\";\n  font-size: 48px;\n  background-color: white;\n  transition: background-color 0.2s ease-in-out;\n  border-radius: 16px;\n}\n\n.toggleButton:hover {\n\tbackground-color: rgb(208, 208, 208)\n}\n\n",
  "frontend/app/_components/Sidebar/styles/global.css": "\nnav ul {\n  list-style: none;\n  padding: 0;\n}\n\nnav li {\n  margin: 20px 0;\n}\n\nnav a {\n  color: white;\n  text-decoration: none;\n  font-size: 1.2rem;\n}\n",
  "frontend/app/_components/Sidebar/styles/sidebar.module.css": "/* .sidebar {\n  position: relative;\n  left: -250px;\n  width: 250px;\n  background: #222;\n  color: white;\n  padding: 20px;\n  transition: left 0.3s ease-in-out;\n}\n\n.sidebar.open {\n  left: 0;\n} */\n\n",
  "frontend/app/_styles/globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: Arial, Helvetica, sans-serif, \"Material Symbols Outlined\";\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n",
  "frontend/app/_styles/page.module.css": ".page {\n  --gray-rgb: 0, 0, 0;\n  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);\n  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);\n\n  --button-primary-hover: #383838;\n  --button-secondary-hover: #f2f2f2;\n\n  display: grid;\n  grid-template-rows: 20px 1fr 20px;\n  align-items: center;\n  justify-items: center;\n  min-height: 100svh;\n  padding: 80px;\n  gap: 64px;\n  font-family: var(--font-geist-sans);\n\n  transition: left 0.3s ease-in-out;\n}\n\n@media (prefers-color-scheme: dark) {\n  .page {\n    --gray-rgb: 255, 255, 255;\n    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);\n    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);\n\n    --button-primary-hover: #ccc;\n    --button-secondary-hover: #1a1a1a;\n  }\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  grid-row-start: 2;\n}\n\n.main ol {\n  font-family: var(--font-geist-mono);\n  padding-left: 0;\n  margin: 0;\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.01em;\n  list-style-position: inside;\n}\n\n.main li:not(:last-of-type) {\n  margin-bottom: 8px;\n}\n\n.main code {\n  font-family: inherit;\n  background: var(--gray-alpha-100);\n  padding: 2px 4px;\n  border-radius: 4px;\n  font-weight: 600;\n}\n\n.ctas {\n  display: flex;\n  gap: 16px;\n}\n\n.ctas a {\n  appearance: none;\n  border-radius: 128px;\n  height: 48px;\n  padding: 0 20px;\n  border: none;\n  border: 1px solid transparent;\n  transition:\n    background 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\na.primary {\n  background: var(--foreground);\n  color: var(--background);\n  gap: 8px;\n}\n\na.secondary {\n  border-color: var(--gray-alpha-200);\n  min-width: 180px;\n}\n\n.footer {\n  grid-row-start: 3;\n  display: flex;\n  gap: 24px;\n}\n\n.footer a {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.footer img {\n  flex-shrink: 0;\n}\n\n/* Enable hover only on non-touch devices */\n@media (hover: hover) and (pointer: fine) {\n  a.primary:hover {\n    background: var(--button-primary-hover);\n    border-color: transparent;\n  }\n\n  a.secondary:hover {\n    background: var(--button-secondary-hover);\n    border-color: transparent;\n  }\n\n  .footer a:hover {\n    text-decoration: underline;\n    text-underline-offset: 4px;\n  }\n}\n\n@media (max-width: 600px) {\n  .page {\n    padding: 32px;\n    padding-bottom: 80px;\n  }\n\n  .main {\n    align-items: center;\n  }\n\n  .main ol {\n    text-align: center;\n  }\n\n  .ctas {\n    flex-direction: column;\n  }\n\n  .ctas a {\n    font-size: 14px;\n    height: 40px;\n    padding: 0 16px;\n  }\n\n  a.secondary {\n    min-width: auto;\n  }\n\n  .footer {\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  .logo {\n    filter: invert();\n  }\n}\n",
  "frontend/app/api/telegram/route.ts": "import { NextResponse } from 'next/server';\n\nimport { requestToBackend, HttpError } from '@/lib/api';\n\ninterface Post {\n  title: string;\n  link: string;\n  contentSnippet: string;\n  imageUrl?: string;\n}\n\nexport async function GET() {\n  try {\n    const posts = await requestToBackend<Post[]>('/api/telegram', 'GET', {\n      next: { revalidate: 600 } \n    });\n\n    return NextResponse.json(posts);\n\n  } catch (error) {\n    console.error('Error in GET /api/telegram:', error);\n\n    if (error instanceof HttpError) {\n      return NextResponse.json(\n        { error: 'Ошибка при запросе к Rust бэкенду', details: error.data }, \n        { status: error.status }\n      );\n    }\n\n    return NextResponse.json(\n        { error: 'Внутренняя ошибка сервера' }, \n        { status: 500 }\n    );\n  }\n}",
  "frontend/app/cats/page.module.css": ".page {\n  --gray-rgb: 0, 0, 0;\n  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);\n  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);\n\n  --button-primary-hover: #383838;\n  --button-secondary-hover: #f2f2f2;\n\n  display: grid;\n  grid-template-rows: 20px 1fr 20px;\n  align-items: center;\n  justify-items: center;\n  min-height: 100svh;\n  padding: 80px;\n  gap: 64px;\n  font-family: var(--font-geist-sans);\n}\n\n@media (prefers-color-scheme: dark) {\n  .page {\n    --gray-rgb: 255, 255, 255;\n    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);\n    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);\n\n    --button-primary-hover: #ccc;\n    --button-secondary-hover: #1a1a1a;\n  }\n}\n\n.main {\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  grid-row-start: 2;\n}\n\n.main ol {\n  font-family: var(--font-geist-mono);\n  padding-left: 0;\n  margin: 0;\n  font-size: 14px;\n  line-height: 24px;\n  letter-spacing: -0.01em;\n  list-style-position: inside;\n}\n\n.main li:not(:last-of-type) {\n  margin-bottom: 8px;\n}\n\n.main code {\n  font-family: inherit;\n  background: var(--gray-alpha-100);\n  padding: 2px 4px;\n  border-radius: 4px;\n  font-weight: 600;\n}\n\n.ctas {\n  display: flex;\n  gap: 16px;\n}\n\n.ctas a {\n  appearance: none;\n  border-radius: 128px;\n  height: 48px;\n  padding: 0 20px;\n  border: none;\n  border: 1px solid transparent;\n  transition:\n    background 0.2s,\n    color 0.2s,\n    border-color 0.2s;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n}\n\na.primary {\n  background: var(--foreground);\n  color: var(--background);\n  gap: 8px;\n}\n\na.secondary {\n  border-color: var(--gray-alpha-200);\n  min-width: 180px;\n}\n\n.footer {\n  grid-row-start: 3;\n  display: flex;\n  gap: 24px;\n}\n\n.footer a {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.footer img {\n  flex-shrink: 0;\n}\n\n/* Enable hover only on non-touch devices */\n@media (hover: hover) and (pointer: fine) {\n  a.primary:hover {\n    background: var(--button-primary-hover);\n    border-color: transparent;\n  }\n\n  a.secondary:hover {\n    background: var(--button-secondary-hover);\n    border-color: transparent;\n  }\n\n  .footer a:hover {\n    text-decoration: underline;\n    text-underline-offset: 4px;\n  }\n}\n\n@media (max-width: 600px) {\n  .page {\n    padding: 32px;\n    padding-bottom: 80px;\n  }\n\n  .main {\n    align-items: center;\n  }\n\n  .main ol {\n    text-align: center;\n  }\n\n  .ctas {\n    flex-direction: column;\n  }\n\n  .ctas a {\n    font-size: 14px;\n    height: 40px;\n    padding: 0 16px;\n  }\n\n  a.secondary {\n    min-width: auto;\n  }\n\n  .footer {\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n@media (prefers-color-scheme: dark) {\n  .logo {\n    filter: invert();\n  }\n}\n",
  "frontend/app/cats/page.tsx": "import styles from \"./page.module.css\";\n\nexport default function Portfolio() {\n  return (\n    <div className={styles.page}>\n      cats\n    </div>\n  );\n}\n",
  "frontend/app/i18n.ts": "import {notFound} from 'next/navigation';\nimport {getRequestConfig} from 'next-intl/server'; \n// Типы нам все еще нужны для валидации\nimport {locales as appLocales, type locale as LocaleType} from '@/types/i18n'; \n\n\nexport default getRequestConfig(async ({locale}) => { \n  // Валидация локали, переданной системой\n  if (!appLocales.includes(locale as LocaleType)) {\n    notFound(); \n  }\n\n  return {\n    locale, // Возвращать locale здесь не обязательно, если вы его просто используете\n                      // но и не вредно. Главное, чтобы messages были для этой locale.\n    messages: (await import(`../locales/${locale}.json`)).default\n  };\n});",
  "frontend/app/layout.tsx": "type Props = {\n  children: React.ReactNode;\n};\n\nexport default function RootLayout({ children }: Props) {\n  return (\n    <>\n        {children}\n    </>\n  );\n}",
  "frontend/app/sitemap.ts": "export default async function sitemap() {\n    return [ \n        {\n            url: 'https://diametrfq/about',\n            lastModified: new Date()\n        },\n        {\n            url: 'https://diametrfq/contact',\n            lastModified: new Date()\n        },\n        {\n            url: 'https://diametrfq/dashboard',\n            lastModified: new Date()\n        },\n        {\n            url: 'https://diametrfq/portfolio',\n            lastModified: new Date()\n        },\n        {\n            url: 'https://diametrfq/telegram',\n            lastModified: new Date()\n        },\n        {\n            url: 'https://diametrfq/cats',\n            lastModified: new Date()\n        },\n    ]\n}",
  "frontend/components/app-sidebar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  BookOpen,\n  Bot,\n  Command,\n  Frame,\n  LifeBuoy,\n  Map,\n  PieChart,\n  Send,\n  Settings2,\n  SquareTerminal,\n} from \"lucide-react\"\n\nimport { NavMain } from \"@/components/nav-main\"\nimport { NavProjects } from \"@/components/nav-projects\"\nimport { NavSecondary } from \"@/components/nav-secondary\"\nimport { NavUser } from \"@/components/nav-user\"\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar7\"\n\nconst data = {\n  user: {\n    name: \"shadcn\",\n    email: \"m@example.com\",\n    avatar: \"/avatars/shadcn.jpg\",\n  },\n  navMain: [\n    {\n      title: \"Playground\",\n      url: \"#\",\n      icon: SquareTerminal,\n      isActive: true,\n      items: [\n        {\n          title: \"History\",\n          url: \"#\",\n        },\n        {\n          title: \"Starred\",\n          url: \"#\",\n        },\n        {\n          title: \"Settings\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Models\",\n      url: \"#\",\n      icon: Bot,\n      items: [\n        {\n          title: \"Genesis\",\n          url: \"#\",\n        },\n        {\n          title: \"Explorer\",\n          url: \"#\",\n        },\n        {\n          title: \"Quantum\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Documentation\",\n      url: \"#\",\n      icon: BookOpen,\n      items: [\n        {\n          title: \"Introduction\",\n          url: \"#\",\n        },\n        {\n          title: \"Get Started\",\n          url: \"#\",\n        },\n        {\n          title: \"Tutorials\",\n          url: \"#\",\n        },\n        {\n          title: \"Changelog\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Settings\",\n      url: \"#\",\n      icon: Settings2,\n      items: [\n        {\n          title: \"General\",\n          url: \"#\",\n        },\n        {\n          title: \"Team\",\n          url: \"#\",\n        },\n        {\n          title: \"Billing\",\n          url: \"#\",\n        },\n        {\n          title: \"Limits\",\n          url: \"#\",\n        },\n      ],\n    },\n  ],\n  navSecondary: [\n    {\n      title: \"Support\",\n      url: \"#\",\n      icon: LifeBuoy,\n    },\n    {\n      title: \"Feedback\",\n      url: \"#\",\n      icon: Send,\n    },\n  ],\n  projects: [\n    {\n      name: \"Design Engineering\",\n      url: \"#\",\n      icon: Frame,\n    },\n    {\n      name: \"Sales & Marketing\",\n      url: \"#\",\n      icon: PieChart,\n    },\n    {\n      name: \"Travel\",\n      url: \"#\",\n      icon: Map,\n    },\n  ],\n}\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  return (\n    <Sidebar variant=\"inset\" {...props}>\n      <SidebarHeader>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton size=\"lg\" asChild>\n              <a href=\"#\">\n                <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground\">\n                  <Command className=\"size-4\" />\n                </div>\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-semibold\">Acme Inc</span>\n                  <span className=\"truncate text-xs\">Enterprise</span>\n                </div>\n              </a>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarHeader>\n      <SidebarContent>\n        <NavMain items={data.navMain} />\n        <NavProjects projects={data.projects} />\n        <NavSecondary items={data.navSecondary} className=\"mt-auto\" />\n      </SidebarContent>\n      <SidebarFooter>\n        <NavUser user={data.user} />\n      </SidebarFooter>\n    </Sidebar>\n  )\n}\n",
  "frontend/components/nav-main.tsx": "\"use client\"\n\nimport { ChevronRight, type LucideIcon } from \"lucide-react\"\n\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\"\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n} from \"@/components/ui/sidebar7\"\n\nexport function NavMain({\n  items,\n}: {\n  items: {\n    title: string\n    url: string\n    icon: LucideIcon\n    isActive?: boolean\n    items?: {\n      title: string\n      url: string\n    }[]\n  }[]\n}) {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel>Platform</SidebarGroupLabel>\n      <SidebarMenu>\n        {items.map((item) => (\n          <Collapsible key={item.title} asChild defaultOpen={item.isActive}>\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild tooltip={item.title}>\n                <a href={item.url}>\n                  <item.icon />\n                  <span>{item.title}</span>\n                </a>\n              </SidebarMenuButton>\n              {item.items?.length ? (\n                <>\n                  <CollapsibleTrigger asChild>\n                    <SidebarMenuAction className=\"data-[state=open]:rotate-90\">\n                      <ChevronRight />\n                      <span className=\"sr-only\">Toggle</span>\n                    </SidebarMenuAction>\n                  </CollapsibleTrigger>\n                  <CollapsibleContent>\n                    <SidebarMenuSub>\n                      {item.items?.map((subItem) => (\n                        <SidebarMenuSubItem key={subItem.title}>\n                          <SidebarMenuSubButton asChild>\n                            <a href={subItem.url}>\n                              <span>{subItem.title}</span>\n                            </a>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                      ))}\n                    </SidebarMenuSub>\n                  </CollapsibleContent>\n                </>\n              ) : null}\n            </SidebarMenuItem>\n          </Collapsible>\n        ))}\n      </SidebarMenu>\n    </SidebarGroup>\n  )\n}\n",
  "frontend/components/nav-projects.tsx": "\"use client\"\n\nimport {\n  Folder,\n  MoreHorizontal,\n  Share,\n  Trash2,\n  type LucideIcon,\n} from \"lucide-react\"\n\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar7\"\n\nexport function NavProjects({\n  projects,\n}: {\n  projects: {\n    name: string\n    url: string\n    icon: LucideIcon\n  }[]\n}) {\n  const { isMobile } = useSidebar()\n\n  return (\n    <SidebarGroup className=\"group-data-[collapsible=icon]:hidden\">\n      <SidebarGroupLabel>Projects</SidebarGroupLabel>\n      <SidebarMenu>\n        {projects.map((item) => (\n          <SidebarMenuItem key={item.name}>\n            <SidebarMenuButton asChild>\n              <a href={item.url}>\n                <item.icon />\n                <span>{item.name}</span>\n              </a>\n            </SidebarMenuButton>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <SidebarMenuAction showOnHover>\n                  <MoreHorizontal />\n                  <span className=\"sr-only\">More</span>\n                </SidebarMenuAction>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent\n                className=\"w-48\"\n                side={isMobile ? \"bottom\" : \"right\"}\n                align={isMobile ? \"end\" : \"start\"}\n              >\n                <DropdownMenuItem>\n                  <Folder className=\"text-muted-foreground\" />\n                  <span>View Project</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Share className=\"text-muted-foreground\" />\n                  <span>Share Project</span>\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <Trash2 className=\"text-muted-foreground\" />\n                  <span>Delete Project</span>\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </SidebarMenuItem>\n        ))}\n        <SidebarMenuItem>\n          <SidebarMenuButton>\n            <MoreHorizontal />\n            <span>More</span>\n          </SidebarMenuButton>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    </SidebarGroup>\n  )\n}\n",
  "frontend/components/nav-secondary.tsx": "import * as React from \"react\"\nimport { type LucideIcon } from \"lucide-react\"\n\nimport {\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar7\"\n\nexport function NavSecondary({\n  items,\n  ...props\n}: {\n  items: {\n    title: string\n    url: string\n    icon: LucideIcon\n  }[]\n} & React.ComponentPropsWithoutRef<typeof SidebarGroup>) {\n  return (\n    <SidebarGroup {...props}>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {items.map((item) => (\n            <SidebarMenuItem key={item.title}>\n              <SidebarMenuButton asChild size=\"sm\">\n                <a href={item.url}>\n                  <item.icon />\n                  <span>{item.title}</span>\n                </a>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  )\n}\n",
  "frontend/components/nav-user.tsx": "\"use client\"\n\nimport {\n  BadgeCheck,\n  Bell,\n  ChevronsUpDown,\n  CreditCard,\n  LogOut,\n  Sparkles,\n} from \"lucide-react\"\n\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/components/ui/avatar\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar7\"\n\nexport function NavUser({\n  user,\n}: {\n  user: {\n    name: string\n    email: string\n    avatar: string\n  }\n}) {\n  const { isMobile } = useSidebar()\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <Avatar className=\"h-8 w-8 rounded-lg\">\n                <AvatarImage src={user.avatar} alt={user.name} />\n                <AvatarFallback className=\"rounded-lg\">CN</AvatarFallback>\n              </Avatar>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-semibold\">{user.name}</span>\n                <span className=\"truncate text-xs\">{user.email}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto size-4\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            align=\"end\"\n            sideOffset={4}\n          >\n            <DropdownMenuLabel className=\"p-0 font-normal\">\n              <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                <Avatar className=\"h-8 w-8 rounded-lg\">\n                  <AvatarImage src={user.avatar} alt={user.name} />\n                  <AvatarFallback className=\"rounded-lg\">CN</AvatarFallback>\n                </Avatar>\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-semibold\">{user.name}</span>\n                  <span className=\"truncate text-xs\">{user.email}</span>\n                </div>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <Sparkles />\n                Upgrade to Pro\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                <BadgeCheck />\n                Account\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <CreditCard />\n                Billing\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <Bell />\n                Notifications\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n              <LogOut />\n              Log out\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </SidebarMenuItem>\n    </SidebarMenu>\n  )\n}\n",
  "frontend/components/theme-provider.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\n\nexport function ThemeProvider({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
  "frontend/components/ui/avatar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
  "frontend/components/ui/breadcrumb.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
  "frontend/components/ui/button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
  "frontend/components/ui/collapsible.tsx": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
  "frontend/components/ui/dropdown-menu.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
  "frontend/components/ui/input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
  "frontend/components/ui/separator.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
  "frontend/components/ui/sheet.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
  "frontend/components/ui/sidebar7.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SIDEBAR_WIDTH_COLLAPSED = \"4rem\"; // Задали ширину в уменьшенном состоянии\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open]\n    );\n\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": open ? SIDEBAR_WIDTH : SIDEBAR_WIDTH_COLLAPSED, // Меняем ширину\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full bg-sidebar text-sidebar-foreground\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  }\n);\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"group peer text-sidebar-foreground md:block transition-all duration-300 ease-in-out\",\n          state === \"collapsed\" ? \"w-[--sidebar-width-icon]\" : \"w-[--sidebar-width]\", // Управляем шириной\n          className\n        )}\n        data-state={state}\n        data-variant={variant}\n        data-side={side}\n      >\n        <div className=\"flex h-full w-full flex-col bg-sidebar\">\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
  "frontend/components/ui/skeleton.tsx": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
  "frontend/components/ui/tooltip.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
  "frontend/components.json": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"new-york\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}",
  "frontend/hooks/use-mobile.tsx": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
  "frontend/lib/api.ts": "export class HttpError extends Error {\n  status: number;\n  data: any;\n\n  constructor(status: number, data: any, message?: string) {\n    super(message || `Request failed with status ${status}`);\n    this.name = 'HttpError';\n    this.status = status;\n    this.data = data; // Тело ответа с ошибкой от бэкенда\n  }\n}\n\nconst BACKEND_URL = process.env.RUST_BACKEND_URL || 'http://localhost:8080';\nconsole.log('BACKEND_URL', BACKEND_URL);\n\ntype HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\ninterface RequestOptions {\n  headers?: HeadersInit;\n  body?: BodyInit | Record<string, any>;\n  next?: {\n    revalidate?: number | false;\n    tags?: string[];\n  };\n}\n\n/**\n * Улучшенный и надежный билдер запросов к бэкенду.\n * @template T - Ожидаемый тип данных в успешном ответе.\n * @param endpoint - Путь к API (например, '/api/telegram').\n * @param method - HTTP-метод.\n * @param options - Объект с дополнительными параметрами: headers, body, next (для кеша).\n * @returns - Промис с данными типа T.\n * @throws {HttpError} - В случае ошибки сети или статуса ответа, не равного 2xx.\n */\nexport const requestToBackend = async <T = unknown>(\n  endpoint: string,\n  method: HttpMethod,\n  options: RequestOptions = {}\n): Promise<T> => {\n  const url = new URL(endpoint, BACKEND_URL);\n\n  const config: RequestInit = {\n    method,\n    next: options.next, \n  };\n  \n  const headers = new Headers(options.headers);\n\n  if (options.body && method !== 'GET') {\n    if (typeof options.body === 'object' && !(options.body instanceof FormData)) {\n      config.body = JSON.stringify(options.body);\n      if (!headers.has('Content-Type')) {\n        headers.set('Content-Type', 'application/json');\n      }\n    } else {\n      config.body = options.body as BodyInit;\n    }\n  }\n\n  config.headers = headers;\n\n  try {\n    const response = await fetch(url.toString(), config);\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ message: 'Backend returned non-JSON error response' }));\n      throw new HttpError(response.status, errorData);\n    }\n\n    if (response.status === 204) {\n      return {} as T;\n    }\n    \n    return response.json();\n\n  } catch (error) {\n    if (error instanceof HttpError) {\n      throw error;\n    }\n\n    console.error('Network or fetch error:', error);\n    throw new Error('Network error or failed to fetch');\n  }\n};",
  "frontend/lib/store.ts": "",
  "frontend/lib/utils.ts": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
  "frontend/locales/en.json": "{\n    \"SidebarNavigation\": {\n        \"home\":{\n            \"title\": \"Home\"\n        },\n        \"about\":{\n            \"title\": \"About me\"\n        },\n        \"portfolio\":{\n            \"title\": \"Portfolio\"\n        },\n        \"contact\":{\n            \"title\": \"Contact\"\n        },\n        \"telegram\":{\n            \"title\": \"Telegram\"\n        }\n    }\n}",
  "frontend/locales/ru.json": "{\n    \"SidebarNavigation\": {\n        \"home\":{\n            \"title\": \"Главная\"\n        },\n        \"about\":{\n            \"title\": \"Обо мне\"\n        },\n        \"portfolio\":{\n            \"title\": \"Портфолио\"\n        },\n        \"contact\":{\n            \"title\": \"Контакты\"\n        },\n        \"telegram\":{\n            \"title\": \"Telegram\"\n        }\n    }\n}",
  "frontend/middleware.ts": "// middleware.ts (в корне проекта)\nimport createMiddleware from 'next-intl/middleware';\nimport { locales, type locale as LocaleType } from './types/i18n'; // Путь к типам может отличаться, если middleware в корне\n\nexport default createMiddleware({\n  locales,\n  defaultLocale: 'en' as LocaleType,\n  localePrefix: 'always' // Попробуйте также 'as-needed' для проверки, если 'always' не работает\n});\n\nexport const config = {\n  // Match only internationalized pathnames\n  // Обновленный matcher, который должен быть более надежным:\n  matcher: [\n    // Enable a redirect to a matching locale at the root\n    '/',\n\n    // Set a cookie to remember the previous locale for\n    // all requests that have a locale prefix\n    '/(ru|en)/:path*',\n\n    // Enable redirects that add missing locales\n    // (e.g. `/pathnames` -> `/en/pathnames`)\n    '/((?!_next|_vercel|api|.*\\\\..*).*)' // Исключает служебные пути и файлы\n  ]\n};",
  "frontend/package.json": "{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"@fontsource/material-symbols-outlined\": \"^5.2.12\",\n    \"@next/third-parties\": \"^15.3.3\",\n    \"@radix-ui/react-avatar\": \"^1.1.2\",\n    \"@radix-ui/react-collapsible\": \"^1.1.2\",\n    \"@radix-ui/react-dialog\": \"^1.1.5\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.5\",\n    \"@radix-ui/react-separator\": \"^1.1.1\",\n    \"@radix-ui/react-slot\": \"^1.1.1\",\n    \"@radix-ui/react-tooltip\": \"^1.1.7\",\n    \"@reduxjs/toolkit\": \"^2.5.1\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"lucide-react\": \"^0.474.0\",\n    \"next\": \"^15.3.3\",\n    \"next-intl\": \"^3.26.3\",\n    \"next-themes\": \"^0.4.4\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"react-redux\": \"^9.2.0\",\n    \"rss-parser\": \"^3.13.0\",\n    \"tailwind-merge\": \"^3.0.1\",\n    \"typescript\": \"5.8.3\",\n    \"tailwindcss-animate\": \"^1.0.7\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3\",\n    \"@types/node\": \"20.19.0\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"eslint\": \"^9\",\n    \"eslint-config-next\": \"15.1.6\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\"\n  }\n}\n",
  "frontend/store/StoreProvider.tsx": "'use client';\n\nimport { useRef } from 'react';\nimport { Provider } from 'react-redux';\nimport { makeStore, AppStore } from './index';\n\nexport default function StoreProvider({ children }: { children: React.ReactNode }) {\n  const storeRef = useRef<AppStore>(undefined);\n  if (!storeRef.current) {\n    storeRef.current = makeStore();\n  }\n\n  return <Provider store={storeRef.current}>{children}</Provider>;\n}\n",
  "frontend/store/counter/reducer.ts": "import { createSlice } from \"@reduxjs/toolkit\";\n\nexport type InitialState = {\n  count: number\n}\n\nconst initialState: InitialState = {\n  count: 0\n}\n\nconst dataSlice = createSlice({\n  name: \"dataSlice\",\n  initialState,\n  reducers: {\n    plusQuestNode(state, {payload}: {payload: number}) {\n      state.count += payload\n    },\n    minusQuestNode(state, {payload}: {payload: number}) {\n      state.count -= payload\n    },\n  }\n});\n\nexport const { plusQuestNode, minusQuestNode } = dataSlice.actions;\nexport default dataSlice.reducer;",
  "frontend/store/counter/selectors.ts": "// import { AppState } from \"..\";\n\n// export const questData = (state: AppState) => {\n//     const data = shallowCopy(state.quest.data) as mapData\n//     return data2graph(data)\n// }\n\n// export const clearQuestData = (state: AppState): mapData => shallowCopy(state.quest.data)",
  "frontend/store/headerSettings/reducer.ts": "import { createSlice } from \"@reduxjs/toolkit\";\nimport { locale } from \"@/types/i18n\"; // Убедитесь, что путь правильный\n\nexport type InitialState = {\n  language: locale,\n}\n\nconst initialState: InitialState = {\n  language: 'en', // Это может быть начальным значением или синхронизироваться с useLocale\n}\n\nconst dataSlice = createSlice({\n  name: \"headerSettings\", // Дайте слайсу уникальное имя\n  initialState,\n  reducers: {\n    // setLanguage используется, если нужно синхронизировать Redux с текущей локалью\n    // или если есть компоненты, которые не могут использовать useLocale\n    setLanguage(state, {payload}: {payload: locale}) {\n      state.language = payload\n    },\n  }\n});\n\n// export const { setLanguage, setMessages } = dataSlice.actions; // setMessages удалено\nexport const { setLanguage } = dataSlice.actions;\nexport default dataSlice.reducer;",
  "frontend/store/hooks.ts": "import { useDispatch, useSelector, useStore } from 'react-redux'\nimport type { RootState, AppDispatch, AppStore } from '.'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = useDispatch.withTypes<AppDispatch>()\nexport const useAppSelector = useSelector.withTypes<RootState>()\nexport const useAppStore = useStore.withTypes<AppStore>()",
  "frontend/store/index.ts": "import { configureStore } from '@reduxjs/toolkit'\nimport counterSlice from \"./counter/reducer\";\nimport headerSettingsSlice from \"./headerSettings/reducer\";\n\nexport const makeStore = () => {\n  return configureStore({\n    reducer: {\n      headerSettings: headerSettingsSlice,\n      counter: counterSlice,\n    },\n  })\n}\n\nexport type AppStore = ReturnType<typeof makeStore>\nexport type RootState = ReturnType<AppStore['getState']>\nexport type AppDispatch = AppStore['dispatch']",
  "frontend/tsconfig.json": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\n      \"dom\",\n      \"dom.iterable\",\n      \"esnext\"\n    ],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\n        \"./*\"\n      ],\n      \"@app/*\": [\n        \"./app/*\"\n      ],\n      \"@components/*\": [\n        \"./components/*\"\n      ],\n      \"@hooks/*\": [\n        \"./hooks/*\"\n      ],\n      \"@lib/*\": [\n        \"./lib/*\"\n      ],\n      \"@ui/*\": [\n        \"./components/ui/*\"\n      ],\n      \"@types/*\": [\n        \"./types/*\"\n      ],\n      \"@public/*\": [\n        \"./public/*\"\n      ],\n      \"@store/*\": [\n        \"/store/*\"\n      ]\n    }\n  },\n  \"include\": [\n    \"**/*.ts\",\n    \"**/*.tsx\",\n    \"frontend/.next/types/**/*.ts\",\n    \"frontend/next-env.d.ts\",\n    \".next/types/**/*.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ]\n}\n",
  "frontend/types/i18n.ts": "export type locale = 'ru' | 'en'\nexport const locales = ['ru', 'en'] as const",
  "nginx.conf.local": "events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream frontend_local_upstream { # Если предпочитаете использовать upstream\n        server website_frontend_local:3000;        # 'frontend' - имя сервиса из docker-compose.yml\n    }\n\n    server {\n        listen 80;\n        server_name localhost;\n        return 301 https://$host$request_uri/;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name localhost;\n    \n        ssl_certificate /certs/certificate.pem;\n        ssl_certificate_key /certs/private-key.pem;\n    \n        location / {\n            proxy_pass http://website_frontend_local:3000;\n\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n        }\n\n        location /api/ {\n            proxy_pass http://website_backend_local:8080;\n            \n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}",
  "nginx.conf.prod": "events {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream frontend_prod_upstream { # Если предпочитаете использовать upstream\n        server frontend:3000;       # 'frontend' - имя сервиса из docker-compose.yml\n    }\n\n    server {\n        listen 80;\n        server_name diametrfq.ru; # Ваш реальный домен\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2; # Добавил http2 для производительности\n        server_name diametrfq.ru; # Ваш реальный домен\n\n        ssl_certificate /etc/letsencrypt/live/diametrfq.ru/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/diametrfq.ru/privkey.pem;\n\n        include /etc/letsencrypt/options-ssl-nginx.conf; # Если есть\n        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;   # Если есть\n\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n        ssl_prefer_server_ciphers on;\n\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n        # Другие заголовки безопасности (X-Content-Type-Options, X-Frame-Options и т.д.) также хорошо бы добавить\n\n        location / {\n            proxy_pass http://frontend:3000; # Убедитесь, что 'frontend' - имя сервиса в docker-compose.yml\n            # Или, если используете upstream: proxy_pass http://frontend_prod_upstream;\n\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_http_version 1.1;\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n        }\n\n        location /api/ {\n            proxy_pass http://website_backend:8080; \n            \n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n        }\n    }\n}",
  "package.json": "{\n  \"dependencies\": {\n    \"ignore\": \"^7.0.5\"\n  }\n}\n"
}